// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Unite.Data.Context;

#nullable disable

namespace Unite.Data.Migrations.Migrations
{
    [DbContext(typeof(DomainDbContext))]
    partial class DomainDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Donors.Clinical.Enums.Gender>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("Genders", "don");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Name = "Female",
                            Value = "Female"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Male",
                            Value = "Male"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Other",
                            Value = "Other"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Genome.Analysis.Enums.AnalysisType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("AnalysisTypes", "gen");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Other Analysis",
                            Value = "Other"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Whole Genome Sequencing",
                            Value = "WGS"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Whole Exome Sequencing",
                            Value = "WES"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Bulk RNA Sequencing",
                            Value = "RNASeq"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Single Cell RNA Sequencing",
                            Value = "ScRNASeq"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Genome.Enums.Chromosome>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("Chromosomes", "gen");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Chromosome 1",
                            Value = "1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Chromosome 2",
                            Value = "2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Chromosome 3",
                            Value = "3"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Chromosome 4",
                            Value = "4"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Chromosome 5",
                            Value = "5"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Chromosome 6",
                            Value = "6"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Chromosome 7",
                            Value = "7"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Chromosome 8",
                            Value = "8"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Chromosome 9",
                            Value = "9"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Chromosome 10",
                            Value = "10"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Chromosome 11",
                            Value = "11"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Chromosome 12",
                            Value = "12"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Chromosome 13",
                            Value = "13"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Chromosome 14",
                            Value = "14"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Chromosome 15",
                            Value = "15"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Chromosome 16",
                            Value = "16"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Chromosome 17",
                            Value = "17"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Chromosome 18",
                            Value = "18"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Chromosome 19",
                            Value = "19"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Chromosome 20",
                            Value = "20"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Chromosome 21",
                            Value = "21"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Chromosome 22",
                            Value = "22"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Chromosome X",
                            Value = "X"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Chromosome Y",
                            Value = "Y"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Genome.Variants.CNV.Enums.CnvType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("CnvTypes", "gen");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "TCN gain",
                            Value = "Gain"
                        },
                        new
                        {
                            Id = 2,
                            Name = "TCN loss",
                            Value = "Loss"
                        },
                        new
                        {
                            Id = 3,
                            Name = "TCN neutral",
                            Value = "Neutral"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Undetermined",
                            Value = "Undetermined"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Genome.Variants.SSM.Enums.SsmType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("SsmTypes", "gen");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Single Nucleotide Variant",
                            Value = "SNV"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Insertion",
                            Value = "INS"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Deletion",
                            Value = "DEL"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Multiple Nucleotide Variant",
                            Value = "MNV"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Genome.Variants.SV.Enums.SvType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("SvTypes", "gen");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Duplication",
                            Value = "DUP"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Tandem duplication",
                            Value = "TDUP"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Insertion",
                            Value = "INS"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Deletion",
                            Value = "DEL"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Inversion",
                            Value = "INV"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Intra-choromosmal translocation",
                            Value = "ITX"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Inter-chromosomal translocation",
                            Value = "CTX"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Complex",
                            Value = "COM"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Images.Analysis.Enums.AnalysisType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("AnalysisTypes", "img");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "RFE",
                            Value = "RFE"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Images.Enums.ImageType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("ImageTypes", "img");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "MRI",
                            Value = "MRI"
                        },
                        new
                        {
                            Id = 2,
                            Name = "CT",
                            Value = "CT"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Specimens.Cells.Enums.CellLineCultureType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("CellLineCultureTypes", "spe");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Suspension",
                            Value = "Suspension"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Adherent",
                            Value = "Adherent"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Both",
                            Value = "Both"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Specimens.Cells.Enums.CellLineType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("CellLineTypes", "spe");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Stem Cell",
                            Value = "Stem Cell"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Differentiated",
                            Value = "Differentiated"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Specimens.Cells.Enums.Species>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("Species", "spe");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Human",
                            Value = "Human"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mouse",
                            Value = "Mouse"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Specimens.Enums.GeneExpressionSubtype>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("GeneExpressionSubtypes", "spe");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Classical",
                            Value = "Classical"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mesenchymal",
                            Value = "Mesenchymal"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Proneural",
                            Value = "Proneural"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Specimens.Enums.IdhMutation>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("IdhMutations", "spe");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "IDH1 R132H",
                            Value = "IDH1 R132H"
                        },
                        new
                        {
                            Id = 2,
                            Name = "IDH1 R132C",
                            Value = "IDH1 R132C"
                        },
                        new
                        {
                            Id = 3,
                            Name = "IDH1 R132G",
                            Value = "IDH1 R132G"
                        },
                        new
                        {
                            Id = 4,
                            Name = "IDH1 R132L",
                            Value = "IDH1 R132L"
                        },
                        new
                        {
                            Id = 5,
                            Name = "IDH1 R132S",
                            Value = "IDH1 R132S"
                        },
                        new
                        {
                            Id = 6,
                            Name = "IDH2 R172G",
                            Value = "IDH2 R172G"
                        },
                        new
                        {
                            Id = 7,
                            Name = "IDH2 R172W",
                            Value = "IDH2 R172W"
                        },
                        new
                        {
                            Id = 8,
                            Name = "IDH2 R172K",
                            Value = "IDH2 R172K"
                        },
                        new
                        {
                            Id = 9,
                            Name = "IDH2 R172T",
                            Value = "IDH2 R172T"
                        },
                        new
                        {
                            Id = 10,
                            Name = "IDH2 R172M",
                            Value = "IDH2 R172M"
                        },
                        new
                        {
                            Id = 11,
                            Name = "IDH2 R172S",
                            Value = "IDH2 R172S"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Specimens.Enums.IdhStatus>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("IdhStatuses", "spe");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Wild Type",
                            Value = "Wild Type"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mutant",
                            Value = "Mutant"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Specimens.Enums.MethylationSubtype>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("MethylationSubtypes", "spe");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "H3-K27",
                            Value = "H3-K27"
                        },
                        new
                        {
                            Id = 2,
                            Name = "H3-G34",
                            Value = "H3-G34"
                        },
                        new
                        {
                            Id = 3,
                            Name = "RTKI",
                            Value = "RTKI"
                        },
                        new
                        {
                            Id = 4,
                            Name = "RTKII",
                            Value = "RTKII"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Mesenchymal",
                            Value = "Mesenchymal"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Specimens.Enums.MgmtStatus>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("MgmtStatuses", "spe");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Unmethylated",
                            Value = "Unmethylated"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Methylated",
                            Value = "Methylated"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Specimens.Enums.SpecimenType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("SpecimenTypes", "spe");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Tissue",
                            Value = "Tissue"
                        },
                        new
                        {
                            Id = 2,
                            Name = "CellLine",
                            Value = "CellLine"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Organoid",
                            Value = "Organoid"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Xenograft",
                            Value = "Xenograft"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Specimens.Tissues.Enums.TissueType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("TissueTypes", "spe");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Control",
                            Value = "Control"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Tumor",
                            Value = "Tumor"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Specimens.Tissues.Enums.TumorType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("TumorTypes", "spe");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Primary",
                            Value = "Primary"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Metastasis",
                            Value = "Metastasis"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Recurrent",
                            Value = "Recurrent"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Specimens.Xenografts.Enums.ImplantLocation>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("ImplantLocations", "spe");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Other",
                            Value = "Other"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Striatal",
                            Value = "Striatal"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cortical",
                            Value = "Cortical"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Specimens.Xenografts.Enums.ImplantType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("ImplantTypes", "spe");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Other",
                            Value = "Other"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Orhtotopical",
                            Value = "Orhtotopical"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Specimens.Xenografts.Enums.TumorGrowthForm>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("TumorGrowthForms", "spe");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Encapsulated",
                            Value = "Encapsulated"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Invasive",
                            Value = "Invasive"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Tasks.Enums.AnalysisTaskType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("AnalysisTaskTypes", "com");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "DExp",
                            Value = "DExp"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Tasks.Enums.AnnotationTaskType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("AnnotationTaskTypes", "com");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "SSM",
                            Value = "SSM"
                        },
                        new
                        {
                            Id = 2,
                            Name = "CNV",
                            Value = "CNV"
                        },
                        new
                        {
                            Id = 3,
                            Name = "SV",
                            Value = "SV"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Tasks.Enums.IndexingTaskType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("IndexingTaskTypes", "com");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Donor",
                            Value = "Donor"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Image",
                            Value = "Image"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Specimen",
                            Value = "Specimen"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Gene",
                            Value = "Gene"
                        },
                        new
                        {
                            Id = 5,
                            Name = "SSM",
                            Value = "SSM"
                        },
                        new
                        {
                            Id = 6,
                            Name = "CNV",
                            Value = "CNV"
                        },
                        new
                        {
                            Id = 7,
                            Name = "SV",
                            Value = "SV"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Tasks.Enums.SubmissionTaskType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("SubmissionTaskTypes", "com");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "SSM",
                            Value = "SSM"
                        },
                        new
                        {
                            Id = 2,
                            Name = "CNV",
                            Value = "CNV"
                        },
                        new
                        {
                            Id = 3,
                            Name = "SV",
                            Value = "SV"
                        },
                        new
                        {
                            Id = 4,
                            Name = "TEX",
                            Value = "TEX"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Tasks.Enums.TaskStatusType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("TaskStatusTypes", "com");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Preparing",
                            Value = "Preparing"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Prepared",
                            Value = "Prepared"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Processing",
                            Value = "Processing"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Processed",
                            Value = "Processed"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Failed",
                            Value = "Failed"
                        });
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.Clinical.ClinicalData", b =>
                {
                    b.Property<int>("DonorId")
                        .HasColumnType("integer");

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("Diagnosis")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateOnly?>("DiagnosisDate")
                        .HasColumnType("date");

                    b.Property<int?>("GenderId")
                        .HasColumnType("integer");

                    b.Property<int?>("KpsBaseline")
                        .HasColumnType("integer");

                    b.Property<int?>("LocalizationId")
                        .HasColumnType("integer");

                    b.Property<int?>("PrimarySiteId")
                        .HasColumnType("integer");

                    b.Property<bool?>("ProgressionStatus")
                        .HasColumnType("boolean");

                    b.Property<DateOnly?>("ProgressionStatusChangeDate")
                        .HasColumnType("date");

                    b.Property<int?>("ProgressionStatusChangeDay")
                        .HasColumnType("integer");

                    b.Property<bool?>("SteroidsBaseline")
                        .HasColumnType("boolean");

                    b.Property<bool?>("VitalStatus")
                        .HasColumnType("boolean");

                    b.Property<DateOnly?>("VitalStatusChangeDate")
                        .HasColumnType("date");

                    b.Property<int?>("VitalStatusChangeDay")
                        .HasColumnType("integer");

                    b.HasKey("DonorId");

                    b.HasIndex("GenderId");

                    b.HasIndex("LocalizationId");

                    b.HasIndex("PrimarySiteId");

                    b.ToTable("ClinicalData", "don");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.Clinical.Therapy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Therapies", "don");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.Clinical.Treatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<int>("DonorId")
                        .HasColumnType("integer");

                    b.Property<int?>("DurationDays")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Results")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("StartDay")
                        .HasColumnType("integer");

                    b.Property<int>("TherapyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DonorId");

                    b.HasIndex("TherapyId");

                    b.ToTable("Treatments", "don");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.Clinical.TumorLocalization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("TumorLocalizations", "don");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.Clinical.TumorPrimarySite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("TumorPrimarySites", "don");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.Donor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("MtaProtected")
                        .HasColumnType("boolean");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ReferenceId");

                    b.ToTable("Donors", "don");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Projects", "don");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.ProjectDonor", b =>
                {
                    b.Property<int>("DonorId")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.HasKey("DonorId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectDonors", "don");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.Study", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Studies", "don");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.StudyDonor", b =>
                {
                    b.Property<int>("DonorId")
                        .HasColumnType("integer");

                    b.Property<int>("StudyId")
                        .HasColumnType("integer");

                    b.HasKey("DonorId", "StudyId");

                    b.HasIndex("StudyId");

                    b.ToTable("StudyDonors", "don");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Analysis.AnalysedSample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnalysisId")
                        .HasColumnType("integer");

                    b.Property<int?>("MatchedSampleId")
                        .HasColumnType("integer")
                        .HasColumnName("MatchedSpecimenId");

                    b.Property<double?>("Ploidy")
                        .HasColumnType("double precision");

                    b.Property<double?>("Purity")
                        .HasColumnType("double precision");

                    b.Property<int>("TargetSampleId")
                        .HasColumnType("integer")
                        .HasColumnName("TargetSpecimenId");

                    b.HasKey("Id");

                    b.HasIndex("AnalysisId")
                        .IsUnique();

                    b.HasIndex("MatchedSampleId");

                    b.HasIndex("TargetSampleId");

                    b.ToTable("AnalysedSpecimens", "gen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Analysis.Analysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("Day")
                        .HasColumnType("integer");

                    b.Property<string>("Parameters")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReferenceId");

                    b.HasIndex("TypeId");

                    b.ToTable("Analyses", "gen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Gene", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Biotype")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("ChromosomeId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("End")
                        .HasColumnType("integer");

                    b.Property<int?>("ExonicLength")
                        .HasColumnType("integer");

                    b.Property<string>("StableId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("Start")
                        .HasColumnType("integer");

                    b.Property<bool?>("Strand")
                        .HasColumnType("boolean");

                    b.Property<string>("Symbol")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasAlternateKey("StableId");

                    b.HasIndex("ChromosomeId");

                    b.ToTable("Genes", "gen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Protein", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("End")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsCanonical")
                        .HasColumnType("boolean");

                    b.Property<int?>("Length")
                        .HasColumnType("integer");

                    b.Property<string>("StableId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("Start")
                        .HasColumnType("integer");

                    b.Property<int?>("TranscriptId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasAlternateKey("StableId");

                    b.HasIndex("TranscriptId")
                        .IsUnique();

                    b.ToTable("Proteins", "gen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Transcript", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Biotype")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("ChromosomeId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("End")
                        .HasColumnType("integer");

                    b.Property<int?>("ExonicLength")
                        .HasColumnType("integer");

                    b.Property<int?>("GeneId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsCanonical")
                        .HasColumnType("boolean");

                    b.Property<string>("StableId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("Start")
                        .HasColumnType("integer");

                    b.Property<bool?>("Strand")
                        .HasColumnType("boolean");

                    b.Property<string>("Symbol")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasAlternateKey("StableId");

                    b.HasIndex("ChromosomeId");

                    b.HasIndex("GeneId");

                    b.ToTable("Transcripts", "gen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Transcriptomics.BulkExpression", b =>
                {
                    b.Property<int>("AnalysedSampleId")
                        .HasColumnType("integer")
                        .HasColumnName("AnalysedSampleId");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer")
                        .HasColumnName("GeneId");

                    b.Property<double>("FPKM")
                        .HasColumnType("double precision");

                    b.Property<int>("Reads")
                        .HasColumnType("integer");

                    b.Property<double>("TPM")
                        .HasColumnType("double precision");

                    b.HasKey("AnalysedSampleId", "EntityId");

                    b.HasIndex("EntityId");

                    b.ToTable("BulkGeneExpressions", "gen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Variants.CNV.AffectedTranscript", b =>
                {
                    b.Property<long>("VariantId")
                        .HasColumnType("bigint");

                    b.Property<int>("FeatureId")
                        .HasColumnType("integer");

                    b.Property<int?>("CDNAEnd")
                        .HasColumnType("integer");

                    b.Property<int?>("CDNAStart")
                        .HasColumnType("integer");

                    b.Property<int?>("CDSEnd")
                        .HasColumnType("integer");

                    b.Property<int?>("CDSStart")
                        .HasColumnType("integer");

                    b.Property<string>("Consequences")
                        .HasColumnType("text");

                    b.Property<int?>("Distance")
                        .HasColumnType("integer");

                    b.Property<int?>("OverlapBpNumber")
                        .HasColumnType("integer");

                    b.Property<double?>("OverlapPercentage")
                        .HasColumnType("double precision");

                    b.Property<int?>("ProteinEnd")
                        .HasColumnType("integer");

                    b.Property<int?>("ProteinStart")
                        .HasColumnType("integer");

                    b.HasKey("VariantId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("CnvAffectedTranscripts", "gen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Variants.CNV.Variant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("C1")
                        .HasColumnType("integer");

                    b.Property<double?>("C1Mean")
                        .HasColumnType("double precision");

                    b.Property<int?>("C2")
                        .HasColumnType("integer");

                    b.Property<double?>("C2Mean")
                        .HasColumnType("double precision");

                    b.Property<int>("ChromosomeId")
                        .HasColumnType("integer");

                    b.Property<double?>("DhMax")
                        .HasColumnType("double precision");

                    b.Property<int>("End")
                        .HasColumnType("integer");

                    b.Property<bool?>("HomoDel")
                        .HasColumnType("boolean");

                    b.Property<int?>("Length")
                        .HasColumnType("integer");

                    b.Property<bool?>("Loh")
                        .HasColumnType("boolean");

                    b.Property<int>("Start")
                        .HasColumnType("integer");

                    b.Property<int?>("Tcn")
                        .HasColumnType("integer");

                    b.Property<double?>("TcnMean")
                        .HasColumnType("double precision");

                    b.Property<double?>("TcnRatio")
                        .HasColumnType("double precision");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChromosomeId");

                    b.HasIndex("TypeId");

                    b.ToTable("CNVs", "gen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Variants.CNV.VariantEntry", b =>
                {
                    b.Property<int>("AnalysedSampleId")
                        .HasColumnType("integer")
                        .HasColumnName("AnalysedSampleId");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("VariantId");

                    b.HasKey("AnalysedSampleId", "EntityId");

                    b.HasIndex("EntityId");

                    b.ToTable("CnvEntries", "gen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Variants.SSM.AffectedTranscript", b =>
                {
                    b.Property<long>("VariantId")
                        .HasColumnType("bigint");

                    b.Property<int>("FeatureId")
                        .HasColumnType("integer");

                    b.Property<string>("AminoAcidChange")
                        .HasColumnType("text");

                    b.Property<int?>("CDNAEnd")
                        .HasColumnType("integer");

                    b.Property<int?>("CDNAStart")
                        .HasColumnType("integer");

                    b.Property<int?>("CDSEnd")
                        .HasColumnType("integer");

                    b.Property<int?>("CDSStart")
                        .HasColumnType("integer");

                    b.Property<string>("CodonChange")
                        .HasColumnType("text");

                    b.Property<string>("Consequences")
                        .HasColumnType("text");

                    b.Property<int?>("Distance")
                        .HasColumnType("integer");

                    b.Property<int?>("OverlapBpNumber")
                        .HasColumnType("integer");

                    b.Property<double?>("OverlapPercentage")
                        .HasColumnType("double precision");

                    b.Property<int?>("ProteinEnd")
                        .HasColumnType("integer");

                    b.Property<int?>("ProteinStart")
                        .HasColumnType("integer");

                    b.HasKey("VariantId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("SsmAffectedTranscripts", "gen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Variants.SSM.Variant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alt")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("ChromosomeId")
                        .HasColumnType("integer");

                    b.Property<int>("End")
                        .HasColumnType("integer");

                    b.Property<int?>("Length")
                        .HasColumnType("integer");

                    b.Property<string>("Ref")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Start")
                        .HasColumnType("integer");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChromosomeId");

                    b.HasIndex("TypeId");

                    b.ToTable("SSMs", "gen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Variants.SSM.VariantEntry", b =>
                {
                    b.Property<int>("AnalysedSampleId")
                        .HasColumnType("integer")
                        .HasColumnName("AnalysedSampleId");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("VariantId");

                    b.HasKey("AnalysedSampleId", "EntityId");

                    b.HasIndex("EntityId");

                    b.ToTable("SsmEntries", "gen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Variants.SV.AffectedTranscript", b =>
                {
                    b.Property<long>("VariantId")
                        .HasColumnType("bigint");

                    b.Property<int>("FeatureId")
                        .HasColumnType("integer");

                    b.Property<int?>("CDNAEnd")
                        .HasColumnType("integer");

                    b.Property<int?>("CDNAStart")
                        .HasColumnType("integer");

                    b.Property<int?>("CDSEnd")
                        .HasColumnType("integer");

                    b.Property<int?>("CDSStart")
                        .HasColumnType("integer");

                    b.Property<string>("Consequences")
                        .HasColumnType("text");

                    b.Property<int?>("Distance")
                        .HasColumnType("integer");

                    b.Property<int?>("OverlapBpNumber")
                        .HasColumnType("integer");

                    b.Property<double?>("OverlapPercentage")
                        .HasColumnType("double precision");

                    b.Property<int?>("ProteinEnd")
                        .HasColumnType("integer");

                    b.Property<int?>("ProteinStart")
                        .HasColumnType("integer");

                    b.HasKey("VariantId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("SvAffectedTranscripts", "gen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Variants.SV.Variant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("ChromosomeId")
                        .HasColumnType("integer");

                    b.Property<int>("End")
                        .HasColumnType("integer");

                    b.Property<string>("FlankingSequenceFrom")
                        .HasColumnType("text");

                    b.Property<string>("FlankingSequenceTo")
                        .HasColumnType("text");

                    b.Property<bool?>("Inverted")
                        .HasColumnType("boolean");

                    b.Property<int?>("Length")
                        .HasColumnType("integer");

                    b.Property<int>("OtherChromosomeId")
                        .HasColumnType("integer");

                    b.Property<int>("OtherEnd")
                        .HasColumnType("integer");

                    b.Property<int>("OtherStart")
                        .HasColumnType("integer");

                    b.Property<int>("Start")
                        .HasColumnType("integer");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChromosomeId");

                    b.HasIndex("OtherChromosomeId");

                    b.HasIndex("TypeId");

                    b.ToTable("SVs", "gen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Variants.SV.VariantEntry", b =>
                {
                    b.Property<int>("AnalysedSampleId")
                        .HasColumnType("integer")
                        .HasColumnName("AnalysedSampleId");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("VariantId");

                    b.HasKey("AnalysedSampleId", "EntityId");

                    b.HasIndex("EntityId");

                    b.ToTable("SvEntries", "gen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Images.Analysis.AnalysedSample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnalysisId")
                        .HasColumnType("integer");

                    b.Property<int?>("MatchedSampleId")
                        .HasColumnType("integer")
                        .HasColumnName("MatchedImageId");

                    b.Property<int>("TargetSampleId")
                        .HasColumnType("integer")
                        .HasColumnName("TargetImageId");

                    b.HasKey("Id");

                    b.HasIndex("AnalysisId")
                        .IsUnique();

                    b.HasIndex("MatchedSampleId");

                    b.HasIndex("TargetSampleId");

                    b.ToTable("AnalysedImages", "img");
                });

            modelBuilder.Entity("Unite.Data.Entities.Images.Analysis.Analysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("Day")
                        .HasColumnType("integer");

                    b.Property<string>("Parameters")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReferenceId")
                        .HasDatabaseName("IX_Analyses_ReferenceId1");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("IX_Analyses_TypeId1");

                    b.ToTable("Analyses", "img");
                });

            modelBuilder.Entity("Unite.Data.Entities.Images.Features.RadiomicsFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("RadiomicsFeatures", "img");
                });

            modelBuilder.Entity("Unite.Data.Entities.Images.Features.RadiomicsFeatureEntry", b =>
                {
                    b.Property<int>("AnalysedSampleId")
                        .HasColumnType("integer")
                        .HasColumnName("AnalysedSampleId");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer")
                        .HasColumnName("FeatureId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AnalysedSampleId", "EntityId");

                    b.HasIndex("EntityId");

                    b.ToTable("RadiomicsFeatureEntries", "img");
                });

            modelBuilder.Entity("Unite.Data.Entities.Images.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("CreationDate")
                        .HasColumnType("date");

                    b.Property<int?>("CreationDay")
                        .HasColumnType("integer");

                    b.Property<int>("DonorId")
                        .HasColumnType("integer");

                    b.Property<string>("ReferenceId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DonorId");

                    b.HasIndex("ReferenceId");

                    b.HasIndex("TypeId");

                    b.ToTable("Images", "img");
                });

            modelBuilder.Entity("Unite.Data.Entities.Images.MriImage", b =>
                {
                    b.Property<int>("ImageId")
                        .HasColumnType("integer");

                    b.Property<double?>("ContrastEnhancing")
                        .HasColumnType("double precision");

                    b.Property<double?>("MedianAdcCe")
                        .HasColumnType("double precision");

                    b.Property<double?>("MedianAdcEdema")
                        .HasColumnType("double precision");

                    b.Property<double?>("MedianAdcTumor")
                        .HasColumnType("double precision");

                    b.Property<double?>("MedianCbfCe")
                        .HasColumnType("double precision");

                    b.Property<double?>("MedianCbfEdema")
                        .HasColumnType("double precision");

                    b.Property<double?>("MedianCbfTumor")
                        .HasColumnType("double precision");

                    b.Property<double?>("MedianCbvCe")
                        .HasColumnType("double precision");

                    b.Property<double?>("MedianCbvEdema")
                        .HasColumnType("double precision");

                    b.Property<double?>("MedianCbvTumor")
                        .HasColumnType("double precision");

                    b.Property<double?>("MedianMttCe")
                        .HasColumnType("double precision");

                    b.Property<double?>("MedianMttEdema")
                        .HasColumnType("double precision");

                    b.Property<double?>("MedianMttTumor")
                        .HasColumnType("double precision");

                    b.Property<double?>("NonContrastEnhancing")
                        .HasColumnType("double precision");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<double?>("WholeTumor")
                        .HasColumnType("double precision");

                    b.HasKey("ImageId");

                    b.ToTable("MriImages", "img");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Cells.CellLine", b =>
                {
                    b.Property<int>("SpecimenId")
                        .HasColumnType("integer");

                    b.Property<int?>("CultureTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("SpeciesId")
                        .HasColumnType("integer");

                    b.Property<int?>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("SpecimenId");

                    b.HasIndex("CultureTypeId");

                    b.HasIndex("ReferenceId");

                    b.HasIndex("SpeciesId");

                    b.HasIndex("TypeId");

                    b.ToTable("CellLines", "spe");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Cells.CellLineInfo", b =>
                {
                    b.Property<int>("SpecimenId")
                        .HasColumnType("integer");

                    b.Property<string>("AtccLink")
                        .HasColumnType("text");

                    b.Property<string>("DepositorEstablishment")
                        .HasColumnType("text");

                    b.Property<string>("DepositorName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EstablishmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExPasyLink")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PubMedLink")
                        .HasColumnType("text");

                    b.HasKey("SpecimenId");

                    b.ToTable("CellLineInfo", "spe");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Drug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Drugs", "spe");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.DrugScreening", b =>
                {
                    b.Property<int>("SpecimenId")
                        .HasColumnType("integer");

                    b.Property<int>("DrugId")
                        .HasColumnType("integer");

                    b.Property<double?>("AbsIC25")
                        .HasColumnType("double precision");

                    b.Property<double?>("AbsIC50")
                        .HasColumnType("double precision");

                    b.Property<double?>("AbsIC75")
                        .HasColumnType("double precision");

                    b.Property<string>("Concentration")
                        .HasColumnType("text");

                    b.Property<string>("ConcentrationLine")
                        .HasColumnType("text");

                    b.Property<double?>("Dss")
                        .HasColumnType("double precision");

                    b.Property<double?>("DssSelective")
                        .HasColumnType("double precision");

                    b.Property<double?>("Gof")
                        .HasColumnType("double precision");

                    b.Property<string>("Inhibition")
                        .HasColumnType("text");

                    b.Property<string>("InhibitionLine")
                        .HasColumnType("text");

                    b.Property<double?>("MaxConcentration")
                        .HasColumnType("double precision");

                    b.Property<double?>("MinConcentration")
                        .HasColumnType("double precision");

                    b.HasKey("SpecimenId", "DrugId");

                    b.HasIndex("DrugId");

                    b.ToTable("DrugScreenings", "spe");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.MolecularData", b =>
                {
                    b.Property<int?>("SpecimenId")
                        .HasColumnType("integer");

                    b.Property<bool?>("GcimpMethylation")
                        .HasColumnType("boolean");

                    b.Property<int?>("GeneExpressionSubtypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("IdhMutationId")
                        .HasColumnType("integer");

                    b.Property<int?>("IdhStatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("MethylationSubtypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("MgmtStatusId")
                        .HasColumnType("integer");

                    b.HasKey("SpecimenId");

                    b.HasIndex("GeneExpressionSubtypeId");

                    b.HasIndex("IdhMutationId");

                    b.HasIndex("IdhStatusId");

                    b.HasIndex("MethylationSubtypeId");

                    b.HasIndex("MgmtStatusId");

                    b.ToTable("MolecularData", "spe");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Organoids.Intervention", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<int?>("DurationDays")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Results")
                        .HasColumnType("text");

                    b.Property<int>("SpecimenId")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("StartDay")
                        .HasColumnType("integer");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SpecimenId");

                    b.HasIndex("TypeId");

                    b.ToTable("OrganoidInterventions", "spe");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Organoids.InterventionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("OrganoidInterventionTypes", "spe");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Organoids.Organoid", b =>
                {
                    b.Property<int>("SpecimenId")
                        .HasColumnType("integer");

                    b.Property<int?>("ImplantedCellsNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Medium")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("Tumorigenicity")
                        .HasColumnType("boolean");

                    b.HasKey("SpecimenId");

                    b.HasIndex("ReferenceId");

                    b.ToTable("Organoids", "spe");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Specimen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("CreationDate")
                        .HasColumnType("date");

                    b.Property<int?>("CreationDay")
                        .HasColumnType("integer");

                    b.Property<int>("DonorId")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<string>("ReferenceId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DonorId");

                    b.HasIndex("ParentId");

                    b.HasIndex("ReferenceId");

                    b.HasIndex("TypeId");

                    b.ToTable("Specimens", "spe");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Tissues.Tissue", b =>
                {
                    b.Property<int>("SpecimenId")
                        .HasColumnType("integer");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("SourceId")
                        .HasColumnType("integer");

                    b.Property<int?>("TumorTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("SpecimenId");

                    b.HasIndex("ReferenceId");

                    b.HasIndex("SourceId");

                    b.HasIndex("TumorTypeId");

                    b.HasIndex("TypeId");

                    b.ToTable("Tissues", "spe");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Tissues.TissueSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("TissueSources", "spe");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Xenografts.Intervention", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<int?>("DurationDays")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Results")
                        .HasColumnType("text");

                    b.Property<int>("SpecimenId")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("StartDay")
                        .HasColumnType("integer");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SpecimenId");

                    b.HasIndex("TypeId");

                    b.ToTable("XenograftInterventions", "spe");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Xenografts.InterventionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("XenograftInterventionTypes", "spe");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Xenografts.Xenograft", b =>
                {
                    b.Property<int>("SpecimenId")
                        .HasColumnType("integer");

                    b.Property<int?>("GroupSize")
                        .HasColumnType("integer");

                    b.Property<int?>("ImplantLocationId")
                        .HasColumnType("integer");

                    b.Property<int?>("ImplantTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("ImplantedCellsNumber")
                        .HasColumnType("integer");

                    b.Property<string>("MouseStrain")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("SurvivalDaysFrom")
                        .HasColumnType("integer");

                    b.Property<int?>("SurvivalDaysTo")
                        .HasColumnType("integer");

                    b.Property<int?>("TumorGrowthFormId")
                        .HasColumnType("integer");

                    b.Property<bool?>("Tumorigenicity")
                        .HasColumnType("boolean");

                    b.HasKey("SpecimenId");

                    b.HasIndex("ImplantLocationId");

                    b.HasIndex("ImplantTypeId");

                    b.HasIndex("ReferenceId");

                    b.HasIndex("TumorGrowthFormId");

                    b.ToTable("Xenografts", "spe");
                });

            modelBuilder.Entity("Unite.Data.Entities.Tasks.Task", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("AnalysisTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("AnnotationTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("IndexingTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("StatusTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("SubmissionTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AnalysisTypeId");

                    b.HasIndex("AnnotationTypeId");

                    b.HasIndex("IndexingTypeId");

                    b.HasIndex("StatusTypeId");

                    b.HasIndex("SubmissionTypeId");

                    b.ToTable("Tasks", "com");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.Clinical.ClinicalData", b =>
                {
                    b.HasOne("Unite.Data.Entities.Donors.Donor", "Donor")
                        .WithOne("ClinicalData")
                        .HasForeignKey("Unite.Data.Entities.Donors.Clinical.ClinicalData", "DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Donors.Clinical.Enums.Gender>", null)
                        .WithMany()
                        .HasForeignKey("GenderId");

                    b.HasOne("Unite.Data.Entities.Donors.Clinical.TumorLocalization", "Localization")
                        .WithMany()
                        .HasForeignKey("LocalizationId");

                    b.HasOne("Unite.Data.Entities.Donors.Clinical.TumorPrimarySite", "PrimarySite")
                        .WithMany()
                        .HasForeignKey("PrimarySiteId");

                    b.Navigation("Donor");

                    b.Navigation("Localization");

                    b.Navigation("PrimarySite");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.Clinical.Treatment", b =>
                {
                    b.HasOne("Unite.Data.Entities.Donors.Donor", "Donor")
                        .WithMany("Treatments")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Donors.Clinical.Therapy", "Therapy")
                        .WithMany()
                        .HasForeignKey("TherapyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donor");

                    b.Navigation("Therapy");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.ProjectDonor", b =>
                {
                    b.HasOne("Unite.Data.Entities.Donors.Donor", "Donor")
                        .WithMany("DonorProjects")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Donors.Project", "Project")
                        .WithMany("ProjectDonors")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donor");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.StudyDonor", b =>
                {
                    b.HasOne("Unite.Data.Entities.Donors.Donor", "Donor")
                        .WithMany("DonorStudies")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Donors.Study", "Study")
                        .WithMany("StudyDonors")
                        .HasForeignKey("StudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donor");

                    b.Navigation("Study");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Analysis.AnalysedSample", b =>
                {
                    b.HasOne("Unite.Data.Entities.Genome.Analysis.Analysis", "Analysis")
                        .WithOne("AnalysedSample")
                        .HasForeignKey("Unite.Data.Entities.Genome.Analysis.AnalysedSample", "AnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Specimens.Specimen", "MatchedSample")
                        .WithMany("MatchedSamples")
                        .HasForeignKey("MatchedSampleId");

                    b.HasOne("Unite.Data.Entities.Specimens.Specimen", "TargetSample")
                        .WithMany("AnalysedSamples")
                        .HasForeignKey("TargetSampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Analysis");

                    b.Navigation("MatchedSample");

                    b.Navigation("TargetSample");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Analysis.Analysis", b =>
                {
                    b.HasOne("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Genome.Analysis.Enums.AnalysisType>", null)
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Gene", b =>
                {
                    b.HasOne("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Genome.Enums.Chromosome>", null)
                        .WithMany()
                        .HasForeignKey("ChromosomeId");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Protein", b =>
                {
                    b.HasOne("Unite.Data.Entities.Genome.Transcript", "Transcript")
                        .WithOne("Protein")
                        .HasForeignKey("Unite.Data.Entities.Genome.Protein", "TranscriptId");

                    b.Navigation("Transcript");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Transcript", b =>
                {
                    b.HasOne("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Genome.Enums.Chromosome>", null)
                        .WithMany()
                        .HasForeignKey("ChromosomeId");

                    b.HasOne("Unite.Data.Entities.Genome.Gene", "Gene")
                        .WithMany("Transcripts")
                        .HasForeignKey("GeneId");

                    b.Navigation("Gene");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Transcriptomics.BulkExpression", b =>
                {
                    b.HasOne("Unite.Data.Entities.Genome.Analysis.AnalysedSample", "AnalysedSample")
                        .WithMany("BulkExpressions")
                        .HasForeignKey("AnalysedSampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Genome.Gene", "Entity")
                        .WithMany("BulkExpressions")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnalysedSample");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Variants.CNV.AffectedTranscript", b =>
                {
                    b.HasOne("Unite.Data.Entities.Genome.Transcript", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Genome.Variants.CNV.Variant", "Variant")
                        .WithMany("AffectedTranscripts")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Variants.CNV.Variant", b =>
                {
                    b.HasOne("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Genome.Enums.Chromosome>", null)
                        .WithMany()
                        .HasForeignKey("ChromosomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Genome.Variants.CNV.Enums.CnvType>", null)
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Variants.CNV.VariantEntry", b =>
                {
                    b.HasOne("Unite.Data.Entities.Genome.Analysis.AnalysedSample", "AnalysedSample")
                        .WithMany("CnvEntries")
                        .HasForeignKey("AnalysedSampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Genome.Variants.CNV.Variant", "Entity")
                        .WithMany("Entries")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnalysedSample");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Variants.SSM.AffectedTranscript", b =>
                {
                    b.HasOne("Unite.Data.Entities.Genome.Transcript", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Genome.Variants.SSM.Variant", "Variant")
                        .WithMany("AffectedTranscripts")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Variants.SSM.Variant", b =>
                {
                    b.HasOne("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Genome.Enums.Chromosome>", null)
                        .WithMany()
                        .HasForeignKey("ChromosomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Genome.Variants.SSM.Enums.SsmType>", null)
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Variants.SSM.VariantEntry", b =>
                {
                    b.HasOne("Unite.Data.Entities.Genome.Analysis.AnalysedSample", "AnalysedSample")
                        .WithMany("SsmEntries")
                        .HasForeignKey("AnalysedSampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Genome.Variants.SSM.Variant", "Entity")
                        .WithMany("Entries")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnalysedSample");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Variants.SV.AffectedTranscript", b =>
                {
                    b.HasOne("Unite.Data.Entities.Genome.Transcript", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Genome.Variants.SV.Variant", "Variant")
                        .WithMany("AffectedTranscripts")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Variants.SV.Variant", b =>
                {
                    b.HasOne("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Genome.Enums.Chromosome>", null)
                        .WithMany()
                        .HasForeignKey("ChromosomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Genome.Enums.Chromosome>", null)
                        .WithMany()
                        .HasForeignKey("OtherChromosomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Genome.Variants.SV.Enums.SvType>", null)
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Variants.SV.VariantEntry", b =>
                {
                    b.HasOne("Unite.Data.Entities.Genome.Analysis.AnalysedSample", "AnalysedSample")
                        .WithMany("SvEntries")
                        .HasForeignKey("AnalysedSampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Genome.Variants.SV.Variant", "Entity")
                        .WithMany("Entries")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnalysedSample");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Unite.Data.Entities.Images.Analysis.AnalysedSample", b =>
                {
                    b.HasOne("Unite.Data.Entities.Images.Analysis.Analysis", "Analysis")
                        .WithOne("AnalysedSample")
                        .HasForeignKey("Unite.Data.Entities.Images.Analysis.AnalysedSample", "AnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Images.Image", "MatchedSample")
                        .WithMany("MatchedSamples")
                        .HasForeignKey("MatchedSampleId");

                    b.HasOne("Unite.Data.Entities.Images.Image", "TargetSample")
                        .WithMany("AnalysedSamples")
                        .HasForeignKey("TargetSampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Analysis");

                    b.Navigation("MatchedSample");

                    b.Navigation("TargetSample");
                });

            modelBuilder.Entity("Unite.Data.Entities.Images.Analysis.Analysis", b =>
                {
                    b.HasOne("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Images.Analysis.Enums.AnalysisType>", null)
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Unite.Data.Entities.Images.Features.RadiomicsFeatureEntry", b =>
                {
                    b.HasOne("Unite.Data.Entities.Images.Analysis.AnalysedSample", "AnalysedSample")
                        .WithMany("RadiomicsFeatureEntries")
                        .HasForeignKey("AnalysedSampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Images.Features.RadiomicsFeature", "Entity")
                        .WithMany("Entries")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnalysedSample");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Unite.Data.Entities.Images.Image", b =>
                {
                    b.HasOne("Unite.Data.Entities.Donors.Donor", "Donor")
                        .WithMany("Images")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Images.Enums.ImageType>", null)
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donor");
                });

            modelBuilder.Entity("Unite.Data.Entities.Images.MriImage", b =>
                {
                    b.HasOne("Unite.Data.Entities.Images.Image", "Image")
                        .WithOne("MriImage")
                        .HasForeignKey("Unite.Data.Entities.Images.MriImage", "ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Cells.CellLine", b =>
                {
                    b.HasOne("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Specimens.Cells.Enums.CellLineCultureType>", null)
                        .WithMany()
                        .HasForeignKey("CultureTypeId");

                    b.HasOne("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Specimens.Cells.Enums.Species>", null)
                        .WithMany()
                        .HasForeignKey("SpeciesId");

                    b.HasOne("Unite.Data.Entities.Specimens.Specimen", "Specimen")
                        .WithOne("CellLine")
                        .HasForeignKey("Unite.Data.Entities.Specimens.Cells.CellLine", "SpecimenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Specimens.Cells.Enums.CellLineType>", null)
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.Navigation("Specimen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Cells.CellLineInfo", b =>
                {
                    b.HasOne("Unite.Data.Entities.Specimens.Cells.CellLine", null)
                        .WithOne("Info")
                        .HasForeignKey("Unite.Data.Entities.Specimens.Cells.CellLineInfo", "SpecimenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.DrugScreening", b =>
                {
                    b.HasOne("Unite.Data.Entities.Specimens.Drug", "Drug")
                        .WithMany()
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Specimens.Specimen", "Specimen")
                        .WithMany("DrugScreenings")
                        .HasForeignKey("SpecimenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");

                    b.Navigation("Specimen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.MolecularData", b =>
                {
                    b.HasOne("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Specimens.Enums.GeneExpressionSubtype>", null)
                        .WithMany()
                        .HasForeignKey("GeneExpressionSubtypeId");

                    b.HasOne("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Specimens.Enums.IdhMutation>", null)
                        .WithMany()
                        .HasForeignKey("IdhMutationId");

                    b.HasOne("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Specimens.Enums.IdhStatus>", null)
                        .WithMany()
                        .HasForeignKey("IdhStatusId");

                    b.HasOne("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Specimens.Enums.MethylationSubtype>", null)
                        .WithMany()
                        .HasForeignKey("MethylationSubtypeId");

                    b.HasOne("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Specimens.Enums.MgmtStatus>", null)
                        .WithMany()
                        .HasForeignKey("MgmtStatusId");

                    b.HasOne("Unite.Data.Entities.Specimens.Specimen", "Specimen")
                        .WithOne("MolecularData")
                        .HasForeignKey("Unite.Data.Entities.Specimens.MolecularData", "SpecimenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specimen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Organoids.Intervention", b =>
                {
                    b.HasOne("Unite.Data.Entities.Specimens.Organoids.Organoid", "Organoid")
                        .WithMany("Interventions")
                        .HasForeignKey("SpecimenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Specimens.Organoids.InterventionType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organoid");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Organoids.Organoid", b =>
                {
                    b.HasOne("Unite.Data.Entities.Specimens.Specimen", "Specimen")
                        .WithOne("Organoid")
                        .HasForeignKey("Unite.Data.Entities.Specimens.Organoids.Organoid", "SpecimenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specimen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Specimen", b =>
                {
                    b.HasOne("Unite.Data.Entities.Donors.Donor", "Donor")
                        .WithMany("Specimens")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Specimens.Specimen", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Specimens.Enums.SpecimenType>", null)
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donor");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Tissues.Tissue", b =>
                {
                    b.HasOne("Unite.Data.Entities.Specimens.Tissues.TissueSource", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.HasOne("Unite.Data.Entities.Specimens.Specimen", "Specimen")
                        .WithOne("Tissue")
                        .HasForeignKey("Unite.Data.Entities.Specimens.Tissues.Tissue", "SpecimenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Specimens.Tissues.Enums.TumorType>", null)
                        .WithMany()
                        .HasForeignKey("TumorTypeId");

                    b.HasOne("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Specimens.Tissues.Enums.TissueType>", null)
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.Navigation("Source");

                    b.Navigation("Specimen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Xenografts.Intervention", b =>
                {
                    b.HasOne("Unite.Data.Entities.Specimens.Xenografts.Xenograft", "Xenograft")
                        .WithMany("Interventions")
                        .HasForeignKey("SpecimenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Specimens.Xenografts.InterventionType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");

                    b.Navigation("Xenograft");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Xenografts.Xenograft", b =>
                {
                    b.HasOne("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Specimens.Xenografts.Enums.ImplantLocation>", null)
                        .WithMany()
                        .HasForeignKey("ImplantLocationId");

                    b.HasOne("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Specimens.Xenografts.Enums.ImplantType>", null)
                        .WithMany()
                        .HasForeignKey("ImplantTypeId");

                    b.HasOne("Unite.Data.Entities.Specimens.Specimen", "Specimen")
                        .WithOne("Xenograft")
                        .HasForeignKey("Unite.Data.Entities.Specimens.Xenografts.Xenograft", "SpecimenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Specimens.Xenografts.Enums.TumorGrowthForm>", null)
                        .WithMany()
                        .HasForeignKey("TumorGrowthFormId");

                    b.Navigation("Specimen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Tasks.Task", b =>
                {
                    b.HasOne("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Tasks.Enums.AnalysisTaskType>", null)
                        .WithMany()
                        .HasForeignKey("AnalysisTypeId");

                    b.HasOne("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Tasks.Enums.AnnotationTaskType>", null)
                        .WithMany()
                        .HasForeignKey("AnnotationTypeId");

                    b.HasOne("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Tasks.Enums.IndexingTaskType>", null)
                        .WithMany()
                        .HasForeignKey("IndexingTypeId");

                    b.HasOne("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Tasks.Enums.TaskStatusType>", null)
                        .WithMany()
                        .HasForeignKey("StatusTypeId");

                    b.HasOne("Unite.Data.Context.Mappers.Entities.EnumEntity<Unite.Data.Entities.Tasks.Enums.SubmissionTaskType>", null)
                        .WithMany()
                        .HasForeignKey("SubmissionTypeId");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.Donor", b =>
                {
                    b.Navigation("ClinicalData");

                    b.Navigation("DonorProjects");

                    b.Navigation("DonorStudies");

                    b.Navigation("Images");

                    b.Navigation("Specimens");

                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.Project", b =>
                {
                    b.Navigation("ProjectDonors");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.Study", b =>
                {
                    b.Navigation("StudyDonors");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Analysis.AnalysedSample", b =>
                {
                    b.Navigation("BulkExpressions");

                    b.Navigation("CnvEntries");

                    b.Navigation("SsmEntries");

                    b.Navigation("SvEntries");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Analysis.Analysis", b =>
                {
                    b.Navigation("AnalysedSample");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Gene", b =>
                {
                    b.Navigation("BulkExpressions");

                    b.Navigation("Transcripts");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Transcript", b =>
                {
                    b.Navigation("Protein");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Variants.CNV.Variant", b =>
                {
                    b.Navigation("AffectedTranscripts");

                    b.Navigation("Entries");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Variants.SSM.Variant", b =>
                {
                    b.Navigation("AffectedTranscripts");

                    b.Navigation("Entries");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Variants.SV.Variant", b =>
                {
                    b.Navigation("AffectedTranscripts");

                    b.Navigation("Entries");
                });

            modelBuilder.Entity("Unite.Data.Entities.Images.Analysis.AnalysedSample", b =>
                {
                    b.Navigation("RadiomicsFeatureEntries");
                });

            modelBuilder.Entity("Unite.Data.Entities.Images.Analysis.Analysis", b =>
                {
                    b.Navigation("AnalysedSample");
                });

            modelBuilder.Entity("Unite.Data.Entities.Images.Features.RadiomicsFeature", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("Unite.Data.Entities.Images.Image", b =>
                {
                    b.Navigation("AnalysedSamples");

                    b.Navigation("MatchedSamples");

                    b.Navigation("MriImage");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Cells.CellLine", b =>
                {
                    b.Navigation("Info");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Organoids.Organoid", b =>
                {
                    b.Navigation("Interventions");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Specimen", b =>
                {
                    b.Navigation("AnalysedSamples");

                    b.Navigation("CellLine");

                    b.Navigation("Children");

                    b.Navigation("DrugScreenings");

                    b.Navigation("MatchedSamples");

                    b.Navigation("MolecularData");

                    b.Navigation("Organoid");

                    b.Navigation("Tissue");

                    b.Navigation("Xenograft");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Xenografts.Xenograft", b =>
                {
                    b.Navigation("Interventions");
                });
#pragma warning restore 612, 618
        }
    }
}
