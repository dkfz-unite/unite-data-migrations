// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Unite.Data.Context;

#nullable disable

namespace Unite.Data.Migrations.Migrations
{
    [DbContext(typeof(DomainDbContext))]
    [Migration("20250411085516_Root")]
    partial class Root
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Donors.Clinical.Enums.Sex>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("sex", "don");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Other",
                            Value = "Other"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Female",
                            Value = "Female"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Male",
                            Value = "Male"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Genome.Analysis.Dna.Cnv.Enums.CnvType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("cnv_type", "gen");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "TCN gain",
                            Value = "Gain"
                        },
                        new
                        {
                            Id = 2,
                            Name = "TCN loss",
                            Value = "Loss"
                        },
                        new
                        {
                            Id = 3,
                            Name = "TCN neutral",
                            Value = "Neutral"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Undetermined",
                            Value = "Undetermined"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Genome.Analysis.Dna.Sm.Enums.SmType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("sm_type", "gen");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Single Nucleotide Variant",
                            Value = "SNV"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Insertion",
                            Value = "INS"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Deletion",
                            Value = "DEL"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Multiple Nucleotide Variant",
                            Value = "MNV"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Genome.Analysis.Dna.Sv.Enums.SvType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("sv_type", "gen");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Duplication",
                            Value = "DUP"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Tandem duplication",
                            Value = "TDUP"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Insertion",
                            Value = "INS"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Deletion",
                            Value = "DEL"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Inversion",
                            Value = "INV"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Intra-choromosmal translocation",
                            Value = "ITX"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Inter-chromosomal translocation",
                            Value = "CTX"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Complex rearrangement",
                            Value = "COM"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Genome.Analysis.Enums.AnalysisType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("analysis_type", "gen");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Whole Genome Sequencing",
                            Value = "WGS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Whole Exome Sequencing",
                            Value = "WES"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Bulk RNA Sequencing",
                            Value = "RNASeq"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Single Cell RNA Sequencing",
                            Value = "scRNASeq"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Single Nucleus RNA Sequencing",
                            Value = "snRNASeq"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Bulk ATAC Sequencing",
                            Value = "ATACSeq"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Single Cell ATAC Sequencing",
                            Value = "scATACSeq"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Single Nucleus ATAC Sequencing",
                            Value = "snATACSeq"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Illumina Infinium Methylation Arrays Assay",
                            Value = "MethArray"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Whole Genome Bisulfite Sequencing",
                            Value = "WGBS"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Reduced Representation Bisulfite Sequencing",
                            Value = "RRBS"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Genome.Enums.Chromosome>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("chromosome", "gen");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Chromosome 1",
                            Value = "1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Chromosome 2",
                            Value = "2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Chromosome 3",
                            Value = "3"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Chromosome 4",
                            Value = "4"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Chromosome 5",
                            Value = "5"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Chromosome 6",
                            Value = "6"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Chromosome 7",
                            Value = "7"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Chromosome 8",
                            Value = "8"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Chromosome 9",
                            Value = "9"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Chromosome 10",
                            Value = "10"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Chromosome 11",
                            Value = "11"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Chromosome 12",
                            Value = "12"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Chromosome 13",
                            Value = "13"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Chromosome 14",
                            Value = "14"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Chromosome 15",
                            Value = "15"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Chromosome 16",
                            Value = "16"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Chromosome 17",
                            Value = "17"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Chromosome 18",
                            Value = "18"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Chromosome 19",
                            Value = "19"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Chromosome 20",
                            Value = "20"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Chromosome 21",
                            Value = "21"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Chromosome 22",
                            Value = "22"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Chromosome X",
                            Value = "X"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Chromosome Y",
                            Value = "Y"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Chromosome MT",
                            Value = "MT"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Images.Analysis.Enums.AnalysisType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("analysis_type", "img");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Radiomics Features Extraction",
                            Value = "RFE"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Images.Enums.ImageType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("image_type", "img");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "MR",
                            Value = "MR"
                        },
                        new
                        {
                            Id = 2,
                            Name = "CT",
                            Value = "CT"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Specimens.Analysis.Enums.AnalysisType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("analysis_type", "spe");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Drugs Screening Analysis",
                            Value = "DSA"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Specimens.Enums.GeneExpressionSubtype>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("gene_expression_subtype", "spe");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Classical",
                            Value = "Classical"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mesenchymal",
                            Value = "Mesenchymal"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Proneural",
                            Value = "Proneural"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Specimens.Enums.IdhMutation>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("idh_mutation", "spe");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "IDH1 R132H",
                            Value = "IDH1 R132H"
                        },
                        new
                        {
                            Id = 2,
                            Name = "IDH1 R132C",
                            Value = "IDH1 R132C"
                        },
                        new
                        {
                            Id = 3,
                            Name = "IDH1 R132G",
                            Value = "IDH1 R132G"
                        },
                        new
                        {
                            Id = 4,
                            Name = "IDH1 R132L",
                            Value = "IDH1 R132L"
                        },
                        new
                        {
                            Id = 5,
                            Name = "IDH1 R132S",
                            Value = "IDH1 R132S"
                        },
                        new
                        {
                            Id = 6,
                            Name = "IDH2 R172G",
                            Value = "IDH2 R172G"
                        },
                        new
                        {
                            Id = 7,
                            Name = "IDH2 R172W",
                            Value = "IDH2 R172W"
                        },
                        new
                        {
                            Id = 8,
                            Name = "IDH2 R172K",
                            Value = "IDH2 R172K"
                        },
                        new
                        {
                            Id = 9,
                            Name = "IDH2 R172T",
                            Value = "IDH2 R172T"
                        },
                        new
                        {
                            Id = 10,
                            Name = "IDH2 R172M",
                            Value = "IDH2 R172M"
                        },
                        new
                        {
                            Id = 11,
                            Name = "IDH2 R172S",
                            Value = "IDH2 R172S"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Specimens.Enums.IdhStatus>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("idh_status", "spe");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Wild Type",
                            Value = "Wild Type"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mutant",
                            Value = "Mutant"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Specimens.Enums.MethylationSubtype>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("methylation_subtype", "spe");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "H3-K27",
                            Value = "H3-K27"
                        },
                        new
                        {
                            Id = 2,
                            Name = "H3-G34",
                            Value = "H3-G34"
                        },
                        new
                        {
                            Id = 3,
                            Name = "RTKI",
                            Value = "RTKI"
                        },
                        new
                        {
                            Id = 4,
                            Name = "RTKII",
                            Value = "RTKII"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Mesenchymal",
                            Value = "Mesenchymal"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Specimens.Enums.MgmtStatus>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("mgmt_status", "spe");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Unmethylated",
                            Value = "Unmethylated"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Methylated",
                            Value = "Methylated"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Specimens.Enums.SpecimenType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("specimen_type", "spe");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Material",
                            Value = "Material"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Line",
                            Value = "Line"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Organoid",
                            Value = "Organoid"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Xenograft",
                            Value = "Xenograft"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Specimens.Lines.Enums.CellsCultureType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("cells_culture_type", "spe");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Suspension",
                            Value = "Suspension"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Adherent",
                            Value = "Adherent"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Both",
                            Value = "Both"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Specimens.Lines.Enums.CellsSpecies>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("cells_species", "spe");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Human",
                            Value = "Human"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mouse",
                            Value = "Mouse"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Specimens.Lines.Enums.CellsType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("cells_type", "spe");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Stem Cell",
                            Value = "Stem Cell"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Differentiated",
                            Value = "Differentiated"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Specimens.Materials.Enums.FixationType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("fixation_type", "spe");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "FFPE",
                            Value = "FFPE"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Fresh Frozen",
                            Value = "Fresh Frozen"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Specimens.Materials.Enums.MaterialType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("material_type", "spe");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Normal",
                            Value = "Normal"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Tumor",
                            Value = "Tumor"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Specimens.Materials.Enums.TumorType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("tumor_type", "spe");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Primary",
                            Value = "Primary"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Metastasis",
                            Value = "Metastasis"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Recurrent",
                            Value = "Recurrent"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Specimens.Xenografts.Enums.ImplantLocation>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("implant_location", "spe");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Other",
                            Value = "Other"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Striatal",
                            Value = "Striatal"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cortical",
                            Value = "Cortical"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Specimens.Xenografts.Enums.ImplantType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("implant_type", "spe");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Other",
                            Value = "Other"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Orhtotopical",
                            Value = "Orhtotopical"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Specimens.Xenografts.Enums.TumorGrowthForm>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("tumor_growth_form", "spe");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Encapsulated",
                            Value = "Encapsulated"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Invasive",
                            Value = "Invasive"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Tasks.Enums.AnalysisTaskType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("analysis_task_type", "com");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "don-sce",
                            Value = "don-sce"
                        },
                        new
                        {
                            Id = 300,
                            Name = "meth-dm",
                            Value = "meth-dm"
                        },
                        new
                        {
                            Id = 301,
                            Name = "rna_de",
                            Value = "rna_de"
                        },
                        new
                        {
                            Id = 302,
                            Name = "rnasc_dc",
                            Value = "rnasc_dc"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Tasks.Enums.AnnotationTaskType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("annotation_task_type", "com");

                    b.HasData(
                        new
                        {
                            Id = 301,
                            Name = "dna-sm",
                            Value = "dna-sm"
                        },
                        new
                        {
                            Id = 302,
                            Name = "dna-cnv",
                            Value = "dna-cnv"
                        },
                        new
                        {
                            Id = 303,
                            Name = "dna-sv",
                            Value = "dna-sv"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Tasks.Enums.IndexingTaskType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("indexing_task_type", "com");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Project",
                            Value = "Project"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Donor",
                            Value = "Donor"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Image",
                            Value = "Image"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Specimen",
                            Value = "Specimen"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Gene",
                            Value = "Gene"
                        },
                        new
                        {
                            Id = 6,
                            Name = "SM",
                            Value = "SM"
                        },
                        new
                        {
                            Id = 7,
                            Name = "CNV",
                            Value = "CNV"
                        },
                        new
                        {
                            Id = 8,
                            Name = "SV",
                            Value = "SV"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Tasks.Enums.SubmissionTaskType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("submission_task_types", "com");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "don",
                            Value = "don"
                        },
                        new
                        {
                            Id = 1,
                            Name = "don-trt",
                            Value = "don-trt"
                        },
                        new
                        {
                            Id = 100,
                            Name = "mr",
                            Value = "mr"
                        },
                        new
                        {
                            Id = 101,
                            Name = "img-rad",
                            Value = "img-rad"
                        },
                        new
                        {
                            Id = 200,
                            Name = "mat",
                            Value = "mat"
                        },
                        new
                        {
                            Id = 201,
                            Name = "lne",
                            Value = "lne"
                        },
                        new
                        {
                            Id = 202,
                            Name = "org",
                            Value = "org"
                        },
                        new
                        {
                            Id = 203,
                            Name = "xen",
                            Value = "xen"
                        },
                        new
                        {
                            Id = 204,
                            Name = "spe-int",
                            Value = "spe-int"
                        },
                        new
                        {
                            Id = 205,
                            Name = "spe-drg",
                            Value = "spe-drg"
                        },
                        new
                        {
                            Id = 300,
                            Name = "dna",
                            Value = "dna"
                        },
                        new
                        {
                            Id = 301,
                            Name = "dna-sm",
                            Value = "dna-sm"
                        },
                        new
                        {
                            Id = 302,
                            Name = "dna-cnv",
                            Value = "dna-cnv"
                        },
                        new
                        {
                            Id = 303,
                            Name = "dna-sv",
                            Value = "dna-sv"
                        },
                        new
                        {
                            Id = 310,
                            Name = "meth",
                            Value = "meth"
                        },
                        new
                        {
                            Id = 311,
                            Name = "meth-lvl",
                            Value = "meth-lvl"
                        },
                        new
                        {
                            Id = 320,
                            Name = "rna",
                            Value = "rna"
                        },
                        new
                        {
                            Id = 321,
                            Name = "rna-exp",
                            Value = "rna-exp"
                        },
                        new
                        {
                            Id = 330,
                            Name = "rnasc",
                            Value = "rnasc"
                        },
                        new
                        {
                            Id = 331,
                            Name = "rnasc-exp",
                            Value = "rnasc-exp"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Tasks.Enums.TaskStatusType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("task_status_type", "com");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Preparing",
                            Value = "Preparing"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Prepared",
                            Value = "Prepared"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Processing",
                            Value = "Processing"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Processed",
                            Value = "Processed"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Failed",
                            Value = "Failed"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Rejected",
                            Value = "Rejected"
                        });
                });

            modelBuilder.Entity("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Tasks.Enums.WorkerType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("worker_type", "com");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Submission",
                            Value = "Submission"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Annotation",
                            Value = "Annotation"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Indexing",
                            Value = "Indexing"
                        });
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.Clinical.ClinicalData", b =>
                {
                    b.Property<int>("DonorId")
                        .HasColumnType("integer")
                        .HasColumnName("donor_id");

                    b.Property<string>("Diagnosis")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("diagnosis");

                    b.Property<int?>("EnrollmentAge")
                        .HasColumnType("integer")
                        .HasColumnName("enrollment_age");

                    b.Property<DateOnly?>("EnrollmentDate")
                        .HasColumnType("date")
                        .HasColumnName("enrollment_date");

                    b.Property<int?>("Kps")
                        .HasColumnType("integer")
                        .HasColumnName("kps");

                    b.Property<int?>("LocalizationId")
                        .HasColumnType("integer")
                        .HasColumnName("localization_id");

                    b.Property<int?>("PrimarySiteId")
                        .HasColumnType("integer")
                        .HasColumnName("primary_site_id");

                    b.Property<bool?>("ProgressionStatus")
                        .HasColumnType("boolean")
                        .HasColumnName("progression_status");

                    b.Property<DateOnly?>("ProgressionStatusChangeDate")
                        .HasColumnType("date")
                        .HasColumnName("progression_status_change_date");

                    b.Property<int?>("ProgressionStatusChangeDay")
                        .HasColumnType("integer")
                        .HasColumnName("progression_status_change_day");

                    b.Property<int?>("SexId")
                        .HasColumnType("integer")
                        .HasColumnName("sex_id");

                    b.Property<bool?>("SteroidsReactive")
                        .HasColumnType("boolean")
                        .HasColumnName("steroids_reactive");

                    b.Property<bool?>("VitalStatus")
                        .HasColumnType("boolean")
                        .HasColumnName("vital_status");

                    b.Property<DateOnly?>("VitalStatusChangeDate")
                        .HasColumnType("date")
                        .HasColumnName("vital_status_change_date");

                    b.Property<int?>("VitalStatusChangeDay")
                        .HasColumnType("integer")
                        .HasColumnName("vital_status_change_day");

                    b.HasKey("DonorId");

                    b.HasIndex("LocalizationId");

                    b.HasIndex("PrimarySiteId");

                    b.HasIndex("SexId");

                    b.ToTable("clinical_data", "don");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.Clinical.Therapy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("therapy", "don");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.Clinical.Treatment", b =>
                {
                    b.Property<int>("DonorId")
                        .HasColumnType("integer")
                        .HasColumnName("donor_id");

                    b.Property<int>("TherapyId")
                        .HasColumnType("integer")
                        .HasColumnName("therapy_id");

                    b.Property<string>("Details")
                        .HasColumnType("text")
                        .HasColumnName("details");

                    b.Property<int?>("DurationDays")
                        .HasColumnType("integer")
                        .HasColumnName("duration_days");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("Results")
                        .HasColumnType("text")
                        .HasColumnName("results");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<int?>("StartDay")
                        .HasColumnType("integer")
                        .HasColumnName("start_day");

                    b.HasKey("DonorId", "TherapyId");

                    b.HasIndex("TherapyId");

                    b.ToTable("treatment", "don");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.Clinical.TumorLocalization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("tumor_localization", "don");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.Clinical.TumorPrimarySite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("tumor_primary_site", "don");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.Donor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("MtaProtected")
                        .HasColumnType("boolean")
                        .HasColumnName("mta_protected");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("reference_id");

                    b.HasKey("Id");

                    b.HasIndex("ReferenceId");

                    b.ToTable("donor", "don");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("project", "don");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.ProjectDonor", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<int>("DonorId")
                        .HasColumnType("integer")
                        .HasColumnName("donor_id");

                    b.HasKey("ProjectId", "DonorId");

                    b.HasIndex("DonorId");

                    b.ToTable("project_donor", "don");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.Study", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("study", "don");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.StudyDonor", b =>
                {
                    b.Property<int>("StudyId")
                        .HasColumnType("integer")
                        .HasColumnName("study_id");

                    b.Property<int>("DonorId")
                        .HasColumnType("integer")
                        .HasColumnName("donor_id");

                    b.HasKey("StudyId", "DonorId");

                    b.HasIndex("DonorId");

                    b.ToTable("study_donor", "don");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Analysis.Analysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("name");

                    b.Property<int?>("Day")
                        .HasColumnType("integer")
                        .HasColumnName("day");

                    b.Property<string>("Parameters")
                        .HasColumnType("text")
                        .HasColumnName("parameters");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("analysis", "gen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Analysis.Dna.Cnv.AffectedTranscript", b =>
                {
                    b.Property<int>("VariantId")
                        .HasColumnType("integer")
                        .HasColumnName("variant_id");

                    b.Property<int>("FeatureId")
                        .HasColumnType("integer")
                        .HasColumnName("feature_id");

                    b.Property<int?>("AAEnd")
                        .HasColumnType("integer")
                        .HasColumnName("aa_end");

                    b.Property<int?>("AAStart")
                        .HasColumnType("integer")
                        .HasColumnName("aa_start");

                    b.Property<int?>("CDNAEnd")
                        .HasColumnType("integer")
                        .HasColumnName("cdna_end");

                    b.Property<int?>("CDNAStart")
                        .HasColumnType("integer")
                        .HasColumnName("cdna_start");

                    b.Property<int?>("CDSEnd")
                        .HasColumnType("integer")
                        .HasColumnName("cds_end");

                    b.Property<int?>("CDSStart")
                        .HasColumnType("integer")
                        .HasColumnName("cds_start");

                    b.Property<int?>("Distance")
                        .HasColumnType("integer")
                        .HasColumnName("distance");

                    b.Property<string>("Effects")
                        .HasColumnType("text")
                        .HasColumnName("effects");

                    b.Property<int?>("OverlapBpNumber")
                        .HasColumnType("integer")
                        .HasColumnName("overlap_bp_number");

                    b.Property<double?>("OverlapPercentage")
                        .HasColumnType("double precision")
                        .HasColumnName("overlap_percentage");

                    b.HasKey("VariantId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("cnv_affected_transcript", "gen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Analysis.Dna.Cnv.Variant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("C1")
                        .HasColumnType("integer")
                        .HasColumnName("c1");

                    b.Property<double?>("C1Mean")
                        .HasColumnType("double precision")
                        .HasColumnName("c1_mean");

                    b.Property<int?>("C2")
                        .HasColumnType("integer")
                        .HasColumnName("c2");

                    b.Property<double?>("C2Mean")
                        .HasColumnType("double precision")
                        .HasColumnName("c2_mean");

                    b.Property<int>("ChromosomeId")
                        .HasColumnType("integer")
                        .HasColumnName("chromosome_id");

                    b.Property<bool?>("Del")
                        .HasColumnType("boolean")
                        .HasColumnName("del");

                    b.Property<double?>("DhMax")
                        .HasColumnType("double precision")
                        .HasColumnName("dh_max");

                    b.Property<int>("End")
                        .HasColumnType("integer")
                        .HasColumnName("end");

                    b.Property<int?>("Length")
                        .HasColumnType("integer")
                        .HasColumnName("length");

                    b.Property<bool?>("Loh")
                        .HasColumnType("boolean")
                        .HasColumnName("loh");

                    b.Property<int>("Start")
                        .HasColumnType("integer")
                        .HasColumnName("start");

                    b.Property<int?>("Tcn")
                        .HasColumnType("integer")
                        .HasColumnName("tcn");

                    b.Property<double?>("TcnMean")
                        .HasColumnType("double precision")
                        .HasColumnName("tcn_mean");

                    b.Property<double?>("TcnRatio")
                        .HasColumnType("double precision")
                        .HasColumnName("tcn_ratio");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.HasKey("Id");

                    b.HasIndex("ChromosomeId");

                    b.HasIndex("TypeId");

                    b.ToTable("cnv", "gen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Analysis.Dna.Cnv.VariantEntry", b =>
                {
                    b.Property<int>("EntityId")
                        .HasColumnType("integer")
                        .HasColumnName("variant_id");

                    b.Property<int>("SampleId")
                        .HasColumnType("integer")
                        .HasColumnName("sample_id");

                    b.HasKey("EntityId", "SampleId");

                    b.HasIndex("SampleId");

                    b.ToTable("cnv_entry", "gen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Analysis.Dna.Sm.AffectedTranscript", b =>
                {
                    b.Property<int>("VariantId")
                        .HasColumnType("integer")
                        .HasColumnName("variant_id");

                    b.Property<int>("FeatureId")
                        .HasColumnType("integer")
                        .HasColumnName("feature_id");

                    b.Property<int?>("AAEnd")
                        .HasColumnType("integer")
                        .HasColumnName("aa_end");

                    b.Property<int?>("AAStart")
                        .HasColumnType("integer")
                        .HasColumnName("aa_start");

                    b.Property<int?>("CDNAEnd")
                        .HasColumnType("integer")
                        .HasColumnName("cdna_end");

                    b.Property<int?>("CDNAStart")
                        .HasColumnType("integer")
                        .HasColumnName("cdna_start");

                    b.Property<int?>("CDSEnd")
                        .HasColumnType("integer")
                        .HasColumnName("cds_end");

                    b.Property<int?>("CDSStart")
                        .HasColumnType("integer")
                        .HasColumnName("cds_start");

                    b.Property<string>("CodonChange")
                        .HasColumnType("text")
                        .HasColumnName("codon_change");

                    b.Property<int?>("Distance")
                        .HasColumnType("integer")
                        .HasColumnName("distance");

                    b.Property<string>("Effects")
                        .HasColumnType("text")
                        .HasColumnName("effects");

                    b.Property<int?>("OverlapBpNumber")
                        .HasColumnType("integer")
                        .HasColumnName("overlap_bp_number");

                    b.Property<double?>("OverlapPercentage")
                        .HasColumnType("double precision")
                        .HasColumnName("overlap_percentage");

                    b.Property<string>("ProteinChange")
                        .HasColumnType("text")
                        .HasColumnName("protein_change");

                    b.HasKey("VariantId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("sm_affected_transcript", "gen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Analysis.Dna.Sm.Variant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alt")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("alt");

                    b.Property<int>("ChromosomeId")
                        .HasColumnType("integer")
                        .HasColumnName("chromosome_id");

                    b.Property<int>("End")
                        .HasColumnType("integer")
                        .HasColumnName("end");

                    b.Property<int?>("Length")
                        .HasColumnType("integer")
                        .HasColumnName("length");

                    b.Property<string>("Ref")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("ref");

                    b.Property<int>("Start")
                        .HasColumnType("integer")
                        .HasColumnName("start");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.HasKey("Id");

                    b.HasIndex("ChromosomeId");

                    b.HasIndex("TypeId");

                    b.ToTable("sm", "gen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Analysis.Dna.Sm.VariantEntry", b =>
                {
                    b.Property<int>("EntityId")
                        .HasColumnType("integer")
                        .HasColumnName("variant_id");

                    b.Property<int>("SampleId")
                        .HasColumnType("integer")
                        .HasColumnName("sample_id");

                    b.HasKey("EntityId", "SampleId");

                    b.HasIndex("SampleId");

                    b.ToTable("sm_entry", "gen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Analysis.Dna.Sv.AffectedTranscript", b =>
                {
                    b.Property<int>("VariantId")
                        .HasColumnType("integer")
                        .HasColumnName("variant_id");

                    b.Property<int>("FeatureId")
                        .HasColumnType("integer")
                        .HasColumnName("feature_id");

                    b.Property<int?>("AAEnd")
                        .HasColumnType("integer")
                        .HasColumnName("aa_end");

                    b.Property<int?>("AAStart")
                        .HasColumnType("integer")
                        .HasColumnName("aa_start");

                    b.Property<int?>("CDNAEnd")
                        .HasColumnType("integer")
                        .HasColumnName("cdna_end");

                    b.Property<int?>("CDNAStart")
                        .HasColumnType("integer")
                        .HasColumnName("cdna_start");

                    b.Property<int?>("CDSEnd")
                        .HasColumnType("integer")
                        .HasColumnName("cds_end");

                    b.Property<int?>("CDSStart")
                        .HasColumnType("integer")
                        .HasColumnName("cds_start");

                    b.Property<int?>("Distance")
                        .HasColumnType("integer")
                        .HasColumnName("distance");

                    b.Property<string>("Effects")
                        .HasColumnType("text")
                        .HasColumnName("effects");

                    b.Property<int?>("OverlapBpNumber")
                        .HasColumnType("integer")
                        .HasColumnName("overlap_bp_number");

                    b.Property<double?>("OverlapPercentage")
                        .HasColumnType("double precision")
                        .HasColumnName("overlap_percentage");

                    b.HasKey("VariantId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("sv_affected_transcript", "gen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Analysis.Dna.Sv.Variant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChromosomeId")
                        .HasColumnType("integer")
                        .HasColumnName("chromosome_id");

                    b.Property<int>("End")
                        .HasColumnType("integer")
                        .HasColumnName("end");

                    b.Property<string>("FlankingSequenceFrom")
                        .HasColumnType("text")
                        .HasColumnName("flanking_sequence_from");

                    b.Property<string>("FlankingSequenceTo")
                        .HasColumnType("text")
                        .HasColumnName("flanking_sequence_to");

                    b.Property<bool?>("Inverted")
                        .HasColumnType("boolean")
                        .HasColumnName("inverted");

                    b.Property<int?>("Length")
                        .HasColumnType("integer")
                        .HasColumnName("length");

                    b.Property<int>("OtherChromosomeId")
                        .HasColumnType("integer")
                        .HasColumnName("other_chromosome_id");

                    b.Property<int>("OtherEnd")
                        .HasColumnType("integer")
                        .HasColumnName("other_end");

                    b.Property<int>("OtherStart")
                        .HasColumnType("integer")
                        .HasColumnName("other_start");

                    b.Property<int>("Start")
                        .HasColumnType("integer")
                        .HasColumnName("start");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.HasKey("Id");

                    b.HasIndex("ChromosomeId");

                    b.HasIndex("OtherChromosomeId");

                    b.HasIndex("TypeId");

                    b.ToTable("sv", "gen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Analysis.Dna.Sv.VariantEntry", b =>
                {
                    b.Property<int>("EntityId")
                        .HasColumnType("integer")
                        .HasColumnName("variant_id");

                    b.Property<int>("SampleId")
                        .HasColumnType("integer")
                        .HasColumnName("sample_id");

                    b.HasKey("EntityId", "SampleId");

                    b.HasIndex("SampleId");

                    b.ToTable("sv_entry", "gen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Analysis.Rna.GeneExpression", b =>
                {
                    b.Property<int>("EntityId")
                        .HasColumnType("integer")
                        .HasColumnName("gene_id");

                    b.Property<int>("SampleId")
                        .HasColumnType("integer")
                        .HasColumnName("sample_id");

                    b.Property<double>("FPKM")
                        .HasColumnType("double precision")
                        .HasColumnName("fpkm");

                    b.Property<int>("Reads")
                        .HasColumnType("integer")
                        .HasColumnName("reads");

                    b.Property<double>("TPM")
                        .HasColumnType("double precision")
                        .HasColumnName("tpm");

                    b.HasKey("EntityId", "SampleId");

                    b.HasIndex("SampleId");

                    b.ToTable("gene_expression", "gen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Analysis.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnalysisId")
                        .HasColumnType("integer")
                        .HasColumnName("analysis_id");

                    b.Property<int?>("Cells")
                        .HasColumnType("integer")
                        .HasColumnName("cells");

                    b.Property<string>("Genome")
                        .HasColumnType("text")
                        .HasColumnName("genome");

                    b.Property<int?>("MatchedSampleId")
                        .HasColumnType("integer")
                        .HasColumnName("matched_sample_id");

                    b.Property<double?>("Ploidy")
                        .HasColumnType("double precision")
                        .HasColumnName("ploidy");

                    b.Property<double?>("Purity")
                        .HasColumnType("double precision")
                        .HasColumnName("purity");

                    b.Property<int>("SpecimenId")
                        .HasColumnType("integer")
                        .HasColumnName("specimen_id");

                    b.HasKey("Id");

                    b.HasIndex("AnalysisId")
                        .IsUnique();

                    b.HasIndex("MatchedSampleId");

                    b.HasIndex("SpecimenId");

                    b.ToTable("sample", "gen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Analysis.SampleResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Archive")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("archive");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("format");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("SampleId")
                        .HasColumnType("integer")
                        .HasColumnName("sample_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("type");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("SampleId");

                    b.ToTable("sample_resource", "gen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Gene", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Biotype")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("biotype");

                    b.Property<int?>("ChromosomeId")
                        .HasColumnType("integer")
                        .HasColumnName("chromosome_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("End")
                        .HasColumnType("integer")
                        .HasColumnName("end");

                    b.Property<int?>("ExonicLength")
                        .HasColumnType("integer")
                        .HasColumnName("exonic_length");

                    b.Property<string>("StableId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("stable_id");

                    b.Property<int?>("Start")
                        .HasColumnType("integer")
                        .HasColumnName("start");

                    b.Property<bool?>("Strand")
                        .HasColumnType("boolean")
                        .HasColumnName("strand");

                    b.Property<string>("Symbol")
                        .HasColumnType("text")
                        .HasColumnName("symbol");

                    b.HasKey("Id");

                    b.HasAlternateKey("StableId");

                    b.HasIndex("ChromosomeId");

                    b.ToTable("gene", "gen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Protein", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("End")
                        .HasColumnType("integer")
                        .HasColumnName("end");

                    b.Property<bool?>("IsCanonical")
                        .HasColumnType("boolean")
                        .HasColumnName("is_canonical");

                    b.Property<int?>("Length")
                        .HasColumnType("integer")
                        .HasColumnName("length");

                    b.Property<string>("StableId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("stable_id");

                    b.Property<int?>("Start")
                        .HasColumnType("integer")
                        .HasColumnName("start");

                    b.Property<int?>("TranscriptId")
                        .HasColumnType("integer")
                        .HasColumnName("transcript_id");

                    b.HasKey("Id");

                    b.HasAlternateKey("StableId");

                    b.HasIndex("TranscriptId")
                        .IsUnique();

                    b.ToTable("protein", "gen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Transcript", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Biotype")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("biotype");

                    b.Property<int?>("ChromosomeId")
                        .HasColumnType("integer")
                        .HasColumnName("chromosome_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("End")
                        .HasColumnType("integer")
                        .HasColumnName("end");

                    b.Property<int?>("ExonicLength")
                        .HasColumnType("integer")
                        .HasColumnName("exonic_length");

                    b.Property<int?>("GeneId")
                        .HasColumnType("integer")
                        .HasColumnName("gene_id");

                    b.Property<bool?>("IsCanonical")
                        .HasColumnType("boolean")
                        .HasColumnName("is_canonical");

                    b.Property<string>("StableId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("stable_id");

                    b.Property<int?>("Start")
                        .HasColumnType("integer")
                        .HasColumnName("start");

                    b.Property<bool?>("Strand")
                        .HasColumnType("boolean")
                        .HasColumnName("strand");

                    b.Property<string>("Symbol")
                        .HasColumnType("text")
                        .HasColumnName("symbol");

                    b.HasKey("Id");

                    b.HasAlternateKey("StableId");

                    b.HasIndex("ChromosomeId");

                    b.HasIndex("GeneId");

                    b.ToTable("transcript", "gen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Images.Analysis.Analysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("name");

                    b.Property<int?>("Day")
                        .HasColumnType("integer")
                        .HasColumnName("day");

                    b.Property<string>("Parameters")
                        .HasColumnType("text")
                        .HasColumnName("parameters");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.HasKey("Id");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("IX_analysis_type_id1");

                    b.ToTable("analysis", "img");
                });

            modelBuilder.Entity("Unite.Data.Entities.Images.Analysis.Radiomics.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("radiomics_feature", "img");
                });

            modelBuilder.Entity("Unite.Data.Entities.Images.Analysis.Radiomics.FeatureEntry", b =>
                {
                    b.Property<int>("EntityId")
                        .HasColumnType("integer")
                        .HasColumnName("feature_id");

                    b.Property<int>("SampleId")
                        .HasColumnType("integer")
                        .HasColumnName("sample_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("EntityId", "SampleId");

                    b.HasIndex("SampleId");

                    b.ToTable("radiomics_feature_entry", "img");
                });

            modelBuilder.Entity("Unite.Data.Entities.Images.Analysis.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnalysisId")
                        .HasColumnType("integer")
                        .HasColumnName("analysis_id");

                    b.Property<int>("SpecimenId")
                        .HasColumnType("integer")
                        .HasColumnName("image_id");

                    b.HasKey("Id");

                    b.HasIndex("AnalysisId")
                        .IsUnique()
                        .HasDatabaseName("IX_sample_analysis_id1");

                    b.HasIndex("SpecimenId");

                    b.ToTable("sample", "img");
                });

            modelBuilder.Entity("Unite.Data.Entities.Images.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("CreationDate")
                        .HasColumnType("date")
                        .HasColumnName("creation_date");

                    b.Property<int?>("CreationDay")
                        .HasColumnType("integer")
                        .HasColumnName("creation_day");

                    b.Property<int>("DonorId")
                        .HasColumnType("integer")
                        .HasColumnName("donor_id");

                    b.Property<string>("ReferenceId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("reference_id");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.HasKey("Id");

                    b.HasIndex("DonorId");

                    b.HasIndex("ReferenceId");

                    b.HasIndex("TypeId");

                    b.ToTable("image", "img");
                });

            modelBuilder.Entity("Unite.Data.Entities.Images.MrImage", b =>
                {
                    b.Property<int>("ImageId")
                        .HasColumnType("integer")
                        .HasColumnName("image_id");

                    b.Property<double?>("ContrastEnhancing")
                        .HasColumnType("double precision")
                        .HasColumnName("contrast_enhancing");

                    b.Property<double?>("MedianAdcCe")
                        .HasColumnType("double precision")
                        .HasColumnName("median_adc_ce");

                    b.Property<double?>("MedianAdcEdema")
                        .HasColumnType("double precision")
                        .HasColumnName("median_adc_edema");

                    b.Property<double?>("MedianAdcTumor")
                        .HasColumnType("double precision")
                        .HasColumnName("median_adc_tumor");

                    b.Property<double?>("MedianCbfCe")
                        .HasColumnType("double precision")
                        .HasColumnName("median_cbf_ce");

                    b.Property<double?>("MedianCbfEdema")
                        .HasColumnType("double precision")
                        .HasColumnName("median_cbf_edema");

                    b.Property<double?>("MedianCbfTumor")
                        .HasColumnType("double precision")
                        .HasColumnName("median_cbf_tumor");

                    b.Property<double?>("MedianCbvCe")
                        .HasColumnType("double precision")
                        .HasColumnName("median_cbv_ce");

                    b.Property<double?>("MedianCbvEdema")
                        .HasColumnType("double precision")
                        .HasColumnName("median_cbv_edema");

                    b.Property<double?>("MedianCbvTumor")
                        .HasColumnType("double precision")
                        .HasColumnName("median_cbv_tumor");

                    b.Property<double?>("MedianMttCe")
                        .HasColumnType("double precision")
                        .HasColumnName("median_mtt_ce");

                    b.Property<double?>("MedianMttEdema")
                        .HasColumnType("double precision")
                        .HasColumnName("median_mtt_edema");

                    b.Property<double?>("MedianMttTumor")
                        .HasColumnType("double precision")
                        .HasColumnName("median_mtt_tumor");

                    b.Property<double?>("NonContrastEnhancing")
                        .HasColumnType("double precision")
                        .HasColumnName("non_contrast_enhancing");

                    b.Property<double?>("WholeTumor")
                        .HasColumnType("double precision")
                        .HasColumnName("whole_tumor");

                    b.HasKey("ImageId");

                    b.ToTable("mr_image", "img");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Analysis.Analysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("name");

                    b.Property<int?>("Day")
                        .HasColumnType("integer")
                        .HasColumnName("day");

                    b.Property<string>("Parameters")
                        .HasColumnType("text")
                        .HasColumnName("parameters");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.HasKey("Id");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("IX_analysis_type_id2");

                    b.ToTable("analysis", "spe");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Analysis.Drugs.Drug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("drug", "spe");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Analysis.Drugs.DrugScreening", b =>
                {
                    b.Property<int>("EntityId")
                        .HasColumnType("integer")
                        .HasColumnName("drug_id");

                    b.Property<int>("SampleId")
                        .HasColumnType("integer")
                        .HasColumnName("sample_id");

                    b.Property<double?>("Dose25")
                        .HasColumnType("double precision")
                        .HasColumnName("dose_25");

                    b.Property<double?>("Dose50")
                        .HasColumnType("double precision")
                        .HasColumnName("dose_50");

                    b.Property<double?>("Dose75")
                        .HasColumnType("double precision")
                        .HasColumnName("dose_75");

                    b.Property<double?>("DoseMax")
                        .HasColumnType("double precision")
                        .HasColumnName("dose_max");

                    b.Property<double?>("DoseMin")
                        .HasColumnType("double precision")
                        .HasColumnName("dose_min");

                    b.Property<string>("Doses")
                        .HasColumnType("text")
                        .HasColumnName("doses");

                    b.Property<double?>("Dss")
                        .HasColumnType("double precision")
                        .HasColumnName("dss");

                    b.Property<double?>("DssS")
                        .HasColumnType("double precision")
                        .HasColumnName("dss_s");

                    b.Property<double?>("Gof")
                        .HasColumnType("double precision")
                        .HasColumnName("gof");

                    b.Property<string>("Responses")
                        .HasColumnType("text")
                        .HasColumnName("responses");

                    b.HasKey("EntityId", "SampleId");

                    b.HasIndex("SampleId");

                    b.ToTable("drug_screening", "spe");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Analysis.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnalysisId")
                        .HasColumnType("integer")
                        .HasColumnName("analysis_id");

                    b.Property<int>("SpecimenId")
                        .HasColumnType("integer")
                        .HasColumnName("specimen_id");

                    b.HasKey("Id");

                    b.HasIndex("AnalysisId")
                        .IsUnique()
                        .HasDatabaseName("IX_sample_analysis_id2");

                    b.HasIndex("SpecimenId")
                        .HasDatabaseName("IX_sample_specimen_id1");

                    b.ToTable("sample", "spe");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Intervention", b =>
                {
                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.Property<int>("SpecimenId")
                        .HasColumnType("integer")
                        .HasColumnName("specimen_id");

                    b.Property<string>("Details")
                        .HasColumnType("text")
                        .HasColumnName("details");

                    b.Property<int?>("DurationDays")
                        .HasColumnType("integer")
                        .HasColumnName("duration_days");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("Results")
                        .HasColumnType("text")
                        .HasColumnName("results");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<int?>("StartDay")
                        .HasColumnType("integer")
                        .HasColumnName("start_day");

                    b.HasKey("TypeId", "SpecimenId");

                    b.HasIndex("SpecimenId");

                    b.ToTable("intervention", "spe");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.InterventionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("intervention_type", "spe");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Lines.Line", b =>
                {
                    b.Property<int>("SpecimenId")
                        .HasColumnType("integer")
                        .HasColumnName("specimen_id");

                    b.Property<int?>("CellsCultureTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("cells_culture_type_id");

                    b.Property<int?>("CellsSpeciesId")
                        .HasColumnType("integer")
                        .HasColumnName("cells_species_id");

                    b.Property<int?>("CellsTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("cells_type_id");

                    b.HasKey("SpecimenId");

                    b.HasIndex("CellsCultureTypeId");

                    b.HasIndex("CellsSpeciesId");

                    b.HasIndex("CellsTypeId");

                    b.ToTable("line", "spe");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Lines.LineInfo", b =>
                {
                    b.Property<int>("SpecimenId")
                        .HasColumnType("integer")
                        .HasColumnName("specimen_id");

                    b.Property<string>("AtccLink")
                        .HasColumnType("text")
                        .HasColumnName("atcc_link");

                    b.Property<string>("DepositorEstablishment")
                        .HasColumnType("text")
                        .HasColumnName("depositor_establishment");

                    b.Property<string>("DepositorName")
                        .HasColumnType("text")
                        .HasColumnName("depositor_name");

                    b.Property<DateOnly?>("EstablishmentDate")
                        .HasColumnType("date")
                        .HasColumnName("establishment_date");

                    b.Property<string>("ExpasyLink")
                        .HasColumnType("text")
                        .HasColumnName("expasy_link");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PubmedLink")
                        .HasColumnType("text")
                        .HasColumnName("pubmed_link");

                    b.HasKey("SpecimenId");

                    b.ToTable("line_info", "spe");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Materials.Material", b =>
                {
                    b.Property<int>("SpecimenId")
                        .HasColumnType("integer")
                        .HasColumnName("specimen_id");

                    b.Property<int?>("FixationTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("fixation_type_id");

                    b.Property<int?>("SourceId")
                        .HasColumnType("integer")
                        .HasColumnName("source_id");

                    b.Property<byte?>("TumorGrade")
                        .HasColumnType("smallint")
                        .HasColumnName("tumor_grade");

                    b.Property<int?>("TumorTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("tumor_type_id");

                    b.Property<int?>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.HasKey("SpecimenId");

                    b.HasIndex("FixationTypeId");

                    b.HasIndex("SourceId");

                    b.HasIndex("TumorTypeId");

                    b.HasIndex("TypeId");

                    b.ToTable("material", "spe");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Materials.MaterialSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("material_source", "spe");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.MolecularData", b =>
                {
                    b.Property<int?>("SpecimenId")
                        .HasColumnType("integer")
                        .HasColumnName("specimen_id");

                    b.Property<bool?>("GcimpMethylation")
                        .HasColumnType("boolean")
                        .HasColumnName("gcimp_methylation");

                    b.Property<int?>("GeneExpressionSubtypeId")
                        .HasColumnType("integer")
                        .HasColumnName("gene_expression_subtype_id");

                    b.Property<int?>("IdhMutationId")
                        .HasColumnType("integer")
                        .HasColumnName("idh_mutation_id");

                    b.Property<int?>("IdhStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("idh_status_id");

                    b.Property<int?>("MethylationSubtypeId")
                        .HasColumnType("integer")
                        .HasColumnName("methylation_subtype_id");

                    b.Property<int?>("MgmtStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("mgmt_status_id");

                    b.HasKey("SpecimenId");

                    b.HasIndex("GeneExpressionSubtypeId");

                    b.HasIndex("IdhMutationId");

                    b.HasIndex("IdhStatusId");

                    b.HasIndex("MethylationSubtypeId");

                    b.HasIndex("MgmtStatusId");

                    b.ToTable("molecular_data", "spe");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Organoids.Organoid", b =>
                {
                    b.Property<int>("SpecimenId")
                        .HasColumnType("integer")
                        .HasColumnName("specimen_id");

                    b.Property<int?>("ImplantedCellsNumber")
                        .HasColumnType("integer")
                        .HasColumnName("implanted_cells_number");

                    b.Property<string>("Medium")
                        .HasColumnType("text")
                        .HasColumnName("medium");

                    b.Property<bool?>("Tumorigenicity")
                        .HasColumnType("boolean")
                        .HasColumnName("tumorigenicity");

                    b.HasKey("SpecimenId");

                    b.ToTable("organoid", "spe");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Specimen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("CreationDate")
                        .HasColumnType("date")
                        .HasColumnName("creation_date");

                    b.Property<int?>("CreationDay")
                        .HasColumnType("integer")
                        .HasColumnName("creation_day");

                    b.Property<int>("DonorId")
                        .HasColumnType("integer")
                        .HasColumnName("donor_id");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<string>("ReferenceId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("reference_id");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.HasKey("Id");

                    b.HasIndex("DonorId");

                    b.HasIndex("ParentId");

                    b.HasIndex("ReferenceId");

                    b.HasIndex("TypeId");

                    b.ToTable("specimen", "spe");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Xenografts.Xenograft", b =>
                {
                    b.Property<int>("SpecimenId")
                        .HasColumnType("integer")
                        .HasColumnName("specimen_id");

                    b.Property<int?>("GroupSize")
                        .HasColumnType("integer")
                        .HasColumnName("group_size");

                    b.Property<int?>("ImplantLocationId")
                        .HasColumnType("integer")
                        .HasColumnName("implant_location_id");

                    b.Property<int?>("ImplantTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("implant_type_id");

                    b.Property<int?>("ImplantedCellsNumber")
                        .HasColumnType("integer")
                        .HasColumnName("implanted_cells_number");

                    b.Property<string>("MouseStrain")
                        .HasColumnType("text")
                        .HasColumnName("mouse_strain");

                    b.Property<int?>("SurvivalDaysFrom")
                        .HasColumnType("integer")
                        .HasColumnName("survival_days_from");

                    b.Property<int?>("SurvivalDaysTo")
                        .HasColumnType("integer")
                        .HasColumnName("survival_days_to");

                    b.Property<int?>("TumorGrowthFormId")
                        .HasColumnType("integer")
                        .HasColumnName("tumor_growth_form_id");

                    b.Property<bool?>("Tumorigenicity")
                        .HasColumnType("boolean")
                        .HasColumnName("tumorigenicity");

                    b.HasKey("SpecimenId");

                    b.HasIndex("ImplantLocationId");

                    b.HasIndex("ImplantTypeId");

                    b.HasIndex("TumorGrowthFormId");

                    b.ToTable("xenograft", "spe");
                });

            modelBuilder.Entity("Unite.Data.Entities.Tasks.Task", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("AnalysisTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("analysis_type_id");

                    b.Property<int?>("AnnotationTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("annotation_type_id");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<string>("Data")
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<int?>("IndexingTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("indexing_type_id");

                    b.Property<int?>("StatusTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("task_status_type_id");

                    b.Property<int?>("SubmissionTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("submission_type_id");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("target");

                    b.HasKey("Id");

                    b.HasIndex("AnalysisTypeId");

                    b.HasIndex("AnnotationTypeId");

                    b.HasIndex("IndexingTypeId");

                    b.HasIndex("StatusTypeId");

                    b.HasIndex("SubmissionTypeId");

                    b.ToTable("task", "com");
                });

            modelBuilder.Entity("Unite.Data.Entities.Tasks.Worker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("worker", "com");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            TypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            TypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            TypeId = 3
                        });
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.Clinical.ClinicalData", b =>
                {
                    b.HasOne("Unite.Data.Entities.Donors.Donor", "Donor")
                        .WithOne("ClinicalData")
                        .HasForeignKey("Unite.Data.Entities.Donors.Clinical.ClinicalData", "DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Donors.Clinical.TumorLocalization", "Localization")
                        .WithMany()
                        .HasForeignKey("LocalizationId");

                    b.HasOne("Unite.Data.Entities.Donors.Clinical.TumorPrimarySite", "PrimarySite")
                        .WithMany()
                        .HasForeignKey("PrimarySiteId");

                    b.HasOne("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Donors.Clinical.Enums.Sex>", null)
                        .WithMany()
                        .HasForeignKey("SexId");

                    b.Navigation("Donor");

                    b.Navigation("Localization");

                    b.Navigation("PrimarySite");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.Clinical.Treatment", b =>
                {
                    b.HasOne("Unite.Data.Entities.Donors.Donor", "Donor")
                        .WithMany("Treatments")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Donors.Clinical.Therapy", "Therapy")
                        .WithMany()
                        .HasForeignKey("TherapyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donor");

                    b.Navigation("Therapy");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.ProjectDonor", b =>
                {
                    b.HasOne("Unite.Data.Entities.Donors.Donor", "Donor")
                        .WithMany("DonorProjects")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Donors.Project", "Project")
                        .WithMany("ProjectDonors")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donor");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.StudyDonor", b =>
                {
                    b.HasOne("Unite.Data.Entities.Donors.Donor", "Donor")
                        .WithMany("DonorStudies")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Donors.Study", "Study")
                        .WithMany("StudyDonors")
                        .HasForeignKey("StudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donor");

                    b.Navigation("Study");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Analysis.Analysis", b =>
                {
                    b.HasOne("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Genome.Analysis.Enums.AnalysisType>", null)
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Analysis.Dna.Cnv.AffectedTranscript", b =>
                {
                    b.HasOne("Unite.Data.Entities.Genome.Transcript", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Genome.Analysis.Dna.Cnv.Variant", "Variant")
                        .WithMany("AffectedTranscripts")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Analysis.Dna.Cnv.Variant", b =>
                {
                    b.HasOne("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Genome.Enums.Chromosome>", null)
                        .WithMany()
                        .HasForeignKey("ChromosomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Genome.Analysis.Dna.Cnv.Enums.CnvType>", null)
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Analysis.Dna.Cnv.VariantEntry", b =>
                {
                    b.HasOne("Unite.Data.Entities.Genome.Analysis.Dna.Cnv.Variant", "Entity")
                        .WithMany("Entries")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Genome.Analysis.Sample", "Sample")
                        .WithMany("CnvEntries")
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("Sample");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Analysis.Dna.Sm.AffectedTranscript", b =>
                {
                    b.HasOne("Unite.Data.Entities.Genome.Transcript", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Genome.Analysis.Dna.Sm.Variant", "Variant")
                        .WithMany("AffectedTranscripts")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Analysis.Dna.Sm.Variant", b =>
                {
                    b.HasOne("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Genome.Enums.Chromosome>", null)
                        .WithMany()
                        .HasForeignKey("ChromosomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Genome.Analysis.Dna.Sm.Enums.SmType>", null)
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Analysis.Dna.Sm.VariantEntry", b =>
                {
                    b.HasOne("Unite.Data.Entities.Genome.Analysis.Dna.Sm.Variant", "Entity")
                        .WithMany("Entries")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Genome.Analysis.Sample", "Sample")
                        .WithMany("SmEntries")
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("Sample");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Analysis.Dna.Sv.AffectedTranscript", b =>
                {
                    b.HasOne("Unite.Data.Entities.Genome.Transcript", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Genome.Analysis.Dna.Sv.Variant", "Variant")
                        .WithMany("AffectedTranscripts")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Analysis.Dna.Sv.Variant", b =>
                {
                    b.HasOne("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Genome.Enums.Chromosome>", null)
                        .WithMany()
                        .HasForeignKey("ChromosomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Genome.Enums.Chromosome>", null)
                        .WithMany()
                        .HasForeignKey("OtherChromosomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Genome.Analysis.Dna.Sv.Enums.SvType>", null)
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Analysis.Dna.Sv.VariantEntry", b =>
                {
                    b.HasOne("Unite.Data.Entities.Genome.Analysis.Dna.Sv.Variant", "Entity")
                        .WithMany("Entries")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Genome.Analysis.Sample", "Sample")
                        .WithMany("SvEntries")
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("Sample");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Analysis.Rna.GeneExpression", b =>
                {
                    b.HasOne("Unite.Data.Entities.Genome.Gene", "Entity")
                        .WithMany("GeneExpressions")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Genome.Analysis.Sample", "Sample")
                        .WithMany("GeneExpressions")
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("Sample");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Analysis.Sample", b =>
                {
                    b.HasOne("Unite.Data.Entities.Genome.Analysis.Analysis", "Analysis")
                        .WithOne("Sample")
                        .HasForeignKey("Unite.Data.Entities.Genome.Analysis.Sample", "AnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Genome.Analysis.Sample", "MatchedSample")
                        .WithMany()
                        .HasForeignKey("MatchedSampleId");

                    b.HasOne("Unite.Data.Entities.Specimens.Specimen", "Specimen")
                        .WithMany("GenomeSamples")
                        .HasForeignKey("SpecimenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Analysis");

                    b.Navigation("MatchedSample");

                    b.Navigation("Specimen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Analysis.SampleResource", b =>
                {
                    b.HasOne("Unite.Data.Entities.Genome.Analysis.Sample", "Sample")
                        .WithMany("Resources")
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sample");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Gene", b =>
                {
                    b.HasOne("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Genome.Enums.Chromosome>", null)
                        .WithMany()
                        .HasForeignKey("ChromosomeId");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Protein", b =>
                {
                    b.HasOne("Unite.Data.Entities.Genome.Transcript", "Transcript")
                        .WithOne("Protein")
                        .HasForeignKey("Unite.Data.Entities.Genome.Protein", "TranscriptId");

                    b.Navigation("Transcript");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Transcript", b =>
                {
                    b.HasOne("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Genome.Enums.Chromosome>", null)
                        .WithMany()
                        .HasForeignKey("ChromosomeId");

                    b.HasOne("Unite.Data.Entities.Genome.Gene", "Gene")
                        .WithMany("Transcripts")
                        .HasForeignKey("GeneId");

                    b.Navigation("Gene");
                });

            modelBuilder.Entity("Unite.Data.Entities.Images.Analysis.Analysis", b =>
                {
                    b.HasOne("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Images.Analysis.Enums.AnalysisType>", null)
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Unite.Data.Entities.Images.Analysis.Radiomics.FeatureEntry", b =>
                {
                    b.HasOne("Unite.Data.Entities.Images.Analysis.Radiomics.Feature", "Entity")
                        .WithMany("Entries")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Images.Analysis.Sample", "Sample")
                        .WithMany("RadiomicsFeatureEntries")
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("Sample");
                });

            modelBuilder.Entity("Unite.Data.Entities.Images.Analysis.Sample", b =>
                {
                    b.HasOne("Unite.Data.Entities.Images.Analysis.Analysis", "Analysis")
                        .WithOne("Sample")
                        .HasForeignKey("Unite.Data.Entities.Images.Analysis.Sample", "AnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Images.Image", "Specimen")
                        .WithMany("Samples")
                        .HasForeignKey("SpecimenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Analysis");

                    b.Navigation("Specimen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Images.Image", b =>
                {
                    b.HasOne("Unite.Data.Entities.Donors.Donor", "Donor")
                        .WithMany("Images")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Images.Enums.ImageType>", null)
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donor");
                });

            modelBuilder.Entity("Unite.Data.Entities.Images.MrImage", b =>
                {
                    b.HasOne("Unite.Data.Entities.Images.Image", "Image")
                        .WithOne("MrImage")
                        .HasForeignKey("Unite.Data.Entities.Images.MrImage", "ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Analysis.Analysis", b =>
                {
                    b.HasOne("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Specimens.Analysis.Enums.AnalysisType>", null)
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Analysis.Drugs.DrugScreening", b =>
                {
                    b.HasOne("Unite.Data.Entities.Specimens.Analysis.Drugs.Drug", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Specimens.Analysis.Sample", "Sample")
                        .WithMany("DrugScreenings")
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("Sample");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Analysis.Sample", b =>
                {
                    b.HasOne("Unite.Data.Entities.Specimens.Analysis.Analysis", "Analysis")
                        .WithOne("Sample")
                        .HasForeignKey("Unite.Data.Entities.Specimens.Analysis.Sample", "AnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Specimens.Specimen", "Specimen")
                        .WithMany("SpecimenSamples")
                        .HasForeignKey("SpecimenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Analysis");

                    b.Navigation("Specimen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Intervention", b =>
                {
                    b.HasOne("Unite.Data.Entities.Specimens.Specimen", "Specimen")
                        .WithMany("Interventions")
                        .HasForeignKey("SpecimenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Specimens.InterventionType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specimen");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Lines.Line", b =>
                {
                    b.HasOne("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Specimens.Lines.Enums.CellsCultureType>", null)
                        .WithMany()
                        .HasForeignKey("CellsCultureTypeId");

                    b.HasOne("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Specimens.Lines.Enums.CellsSpecies>", null)
                        .WithMany()
                        .HasForeignKey("CellsSpeciesId");

                    b.HasOne("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Specimens.Lines.Enums.CellsType>", null)
                        .WithMany()
                        .HasForeignKey("CellsTypeId");

                    b.HasOne("Unite.Data.Entities.Specimens.Specimen", "Specimen")
                        .WithOne("Line")
                        .HasForeignKey("Unite.Data.Entities.Specimens.Lines.Line", "SpecimenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specimen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Lines.LineInfo", b =>
                {
                    b.HasOne("Unite.Data.Entities.Specimens.Lines.Line", null)
                        .WithOne("Info")
                        .HasForeignKey("Unite.Data.Entities.Specimens.Lines.LineInfo", "SpecimenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Materials.Material", b =>
                {
                    b.HasOne("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Specimens.Materials.Enums.FixationType>", null)
                        .WithMany()
                        .HasForeignKey("FixationTypeId");

                    b.HasOne("Unite.Data.Entities.Specimens.Materials.MaterialSource", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.HasOne("Unite.Data.Entities.Specimens.Specimen", "Specimen")
                        .WithOne("Material")
                        .HasForeignKey("Unite.Data.Entities.Specimens.Materials.Material", "SpecimenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Specimens.Materials.Enums.TumorType>", null)
                        .WithMany()
                        .HasForeignKey("TumorTypeId");

                    b.HasOne("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Specimens.Materials.Enums.MaterialType>", null)
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.Navigation("Source");

                    b.Navigation("Specimen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.MolecularData", b =>
                {
                    b.HasOne("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Specimens.Enums.GeneExpressionSubtype>", null)
                        .WithMany()
                        .HasForeignKey("GeneExpressionSubtypeId");

                    b.HasOne("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Specimens.Enums.IdhMutation>", null)
                        .WithMany()
                        .HasForeignKey("IdhMutationId");

                    b.HasOne("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Specimens.Enums.IdhStatus>", null)
                        .WithMany()
                        .HasForeignKey("IdhStatusId");

                    b.HasOne("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Specimens.Enums.MethylationSubtype>", null)
                        .WithMany()
                        .HasForeignKey("MethylationSubtypeId");

                    b.HasOne("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Specimens.Enums.MgmtStatus>", null)
                        .WithMany()
                        .HasForeignKey("MgmtStatusId");

                    b.HasOne("Unite.Data.Entities.Specimens.Specimen", "Specimen")
                        .WithOne("MolecularData")
                        .HasForeignKey("Unite.Data.Entities.Specimens.MolecularData", "SpecimenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specimen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Organoids.Organoid", b =>
                {
                    b.HasOne("Unite.Data.Entities.Specimens.Specimen", "Specimen")
                        .WithOne("Organoid")
                        .HasForeignKey("Unite.Data.Entities.Specimens.Organoids.Organoid", "SpecimenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specimen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Specimen", b =>
                {
                    b.HasOne("Unite.Data.Entities.Donors.Donor", "Donor")
                        .WithMany("Specimens")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Specimens.Specimen", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Specimens.Enums.SpecimenType>", null)
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donor");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Xenografts.Xenograft", b =>
                {
                    b.HasOne("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Specimens.Xenografts.Enums.ImplantLocation>", null)
                        .WithMany()
                        .HasForeignKey("ImplantLocationId");

                    b.HasOne("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Specimens.Xenografts.Enums.ImplantType>", null)
                        .WithMany()
                        .HasForeignKey("ImplantTypeId");

                    b.HasOne("Unite.Data.Entities.Specimens.Specimen", "Specimen")
                        .WithOne("Xenograft")
                        .HasForeignKey("Unite.Data.Entities.Specimens.Xenografts.Xenograft", "SpecimenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Specimens.Xenografts.Enums.TumorGrowthForm>", null)
                        .WithMany()
                        .HasForeignKey("TumorGrowthFormId");

                    b.Navigation("Specimen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Tasks.Task", b =>
                {
                    b.HasOne("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Tasks.Enums.AnalysisTaskType>", null)
                        .WithMany()
                        .HasForeignKey("AnalysisTypeId");

                    b.HasOne("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Tasks.Enums.AnnotationTaskType>", null)
                        .WithMany()
                        .HasForeignKey("AnnotationTypeId");

                    b.HasOne("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Tasks.Enums.IndexingTaskType>", null)
                        .WithMany()
                        .HasForeignKey("IndexingTypeId");

                    b.HasOne("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Tasks.Enums.TaskStatusType>", null)
                        .WithMany()
                        .HasForeignKey("StatusTypeId");

                    b.HasOne("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Tasks.Enums.SubmissionTaskType>", null)
                        .WithMany()
                        .HasForeignKey("SubmissionTypeId");
                });

            modelBuilder.Entity("Unite.Data.Entities.Tasks.Worker", b =>
                {
                    b.HasOne("Unite.Data.Context.Mappers.Base.Entities.EnumEntity<Unite.Data.Entities.Tasks.Enums.WorkerType>", null)
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.Donor", b =>
                {
                    b.Navigation("ClinicalData");

                    b.Navigation("DonorProjects");

                    b.Navigation("DonorStudies");

                    b.Navigation("Images");

                    b.Navigation("Specimens");

                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.Project", b =>
                {
                    b.Navigation("ProjectDonors");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.Study", b =>
                {
                    b.Navigation("StudyDonors");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Analysis.Analysis", b =>
                {
                    b.Navigation("Sample");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Analysis.Dna.Cnv.Variant", b =>
                {
                    b.Navigation("AffectedTranscripts");

                    b.Navigation("Entries");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Analysis.Dna.Sm.Variant", b =>
                {
                    b.Navigation("AffectedTranscripts");

                    b.Navigation("Entries");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Analysis.Dna.Sv.Variant", b =>
                {
                    b.Navigation("AffectedTranscripts");

                    b.Navigation("Entries");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Analysis.Sample", b =>
                {
                    b.Navigation("CnvEntries");

                    b.Navigation("GeneExpressions");

                    b.Navigation("Resources");

                    b.Navigation("SmEntries");

                    b.Navigation("SvEntries");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Gene", b =>
                {
                    b.Navigation("GeneExpressions");

                    b.Navigation("Transcripts");
                });

            modelBuilder.Entity("Unite.Data.Entities.Genome.Transcript", b =>
                {
                    b.Navigation("Protein");
                });

            modelBuilder.Entity("Unite.Data.Entities.Images.Analysis.Analysis", b =>
                {
                    b.Navigation("Sample");
                });

            modelBuilder.Entity("Unite.Data.Entities.Images.Analysis.Radiomics.Feature", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("Unite.Data.Entities.Images.Analysis.Sample", b =>
                {
                    b.Navigation("RadiomicsFeatureEntries");
                });

            modelBuilder.Entity("Unite.Data.Entities.Images.Image", b =>
                {
                    b.Navigation("MrImage");

                    b.Navigation("Samples");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Analysis.Analysis", b =>
                {
                    b.Navigation("Sample");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Analysis.Sample", b =>
                {
                    b.Navigation("DrugScreenings");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Lines.Line", b =>
                {
                    b.Navigation("Info");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Specimen", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("GenomeSamples");

                    b.Navigation("Interventions");

                    b.Navigation("Line");

                    b.Navigation("Material");

                    b.Navigation("MolecularData");

                    b.Navigation("Organoid");

                    b.Navigation("SpecimenSamples");

                    b.Navigation("Xenograft");
                });
#pragma warning restore 612, 618
        }
    }
}
