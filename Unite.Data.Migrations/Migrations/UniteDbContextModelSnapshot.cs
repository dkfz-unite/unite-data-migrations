// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Unite.Data.Services;

namespace Unite.Data.Migrations.Migrations
{
    [DbContext(typeof(UniteDbContext))]
    partial class UniteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Unite.Data.Entities.Clinical.ClinicalData", b =>
                {
                    b.Property<int?>("DonorId")
                        .HasColumnType("integer");

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("Diagnosis")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("DiagnosisDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("GenderId")
                        .HasColumnType("integer");

                    b.Property<int?>("KpsBaseline")
                        .HasColumnType("integer");

                    b.Property<int?>("LocalizationId")
                        .HasColumnType("integer");

                    b.Property<int?>("PrimarySiteId")
                        .HasColumnType("integer");

                    b.Property<bool?>("SteroidsBaseline")
                        .HasColumnType("boolean");

                    b.Property<bool?>("VitalStatus")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("VitalStatusChangeDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("DonorId");

                    b.HasIndex("GenderId");

                    b.HasIndex("LocalizationId");

                    b.HasIndex("PrimarySiteId");

                    b.ToTable("ClinicalData");
                });

            modelBuilder.Entity("Unite.Data.Entities.Clinical.Therapy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Therapies");
                });

            modelBuilder.Entity("Unite.Data.Entities.Clinical.Treatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<int>("DonorId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("ProgressionStatus")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ProgressionStatusChangeDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Results")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TherapyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DonorId");

                    b.HasIndex("TherapyId");

                    b.ToTable("Treatments");
                });

            modelBuilder.Entity("Unite.Data.Entities.Clinical.TumourLocalization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("TumourLocalizations");
                });

            modelBuilder.Entity("Unite.Data.Entities.Clinical.TumourPrimarySite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("TumourPrimarySites");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.Donor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool?>("MtaProtected")
                        .HasColumnType("boolean");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ReferenceId");

                    b.ToTable("Donors");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.Study", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Studies");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.StudyDonor", b =>
                {
                    b.Property<int>("StudyId")
                        .HasColumnType("integer");

                    b.Property<int>("DonorId")
                        .HasColumnType("integer");

                    b.HasKey("StudyId", "DonorId");

                    b.HasIndex("DonorId");

                    b.ToTable("StudyDonors");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.WorkPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("WorkPackages");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.WorkPackageDonor", b =>
                {
                    b.Property<int>("WorkPackageId")
                        .HasColumnType("integer");

                    b.Property<int>("DonorId")
                        .HasColumnType("integer");

                    b.HasKey("WorkPackageId", "DonorId");

                    b.HasIndex("DonorId");

                    b.ToTable("WorkPackageDonors");
                });

            modelBuilder.Entity("Unite.Data.Entities.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Unite.Data.Entities.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasAlternateKey("Email");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Unite.Data.Entities.Identity.UserSession", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("Session")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Client")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("UserId", "Session");

                    b.HasIndex("Session");

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("Unite.Data.Entities.Molecular.MolecularData", b =>
                {
                    b.Property<int?>("SpecimenId")
                        .HasColumnType("integer");

                    b.Property<bool?>("GcimpMethylation")
                        .HasColumnType("boolean");

                    b.Property<int?>("GeneExpressionSubtypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("IdhMutationId")
                        .HasColumnType("integer");

                    b.Property<int?>("IdhStatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("MethylationStatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("MethylationTypeId")
                        .HasColumnType("integer");

                    b.HasKey("SpecimenId");

                    b.HasIndex("GeneExpressionSubtypeId");

                    b.HasIndex("IdhMutationId");

                    b.HasIndex("IdhStatusId");

                    b.HasIndex("MethylationStatusId");

                    b.HasIndex("MethylationTypeId");

                    b.ToTable("MolecularData");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.AffectedTranscript", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AminoAcidChange")
                        .HasColumnType("text");

                    b.Property<int?>("CDNAEnd")
                        .HasColumnType("integer");

                    b.Property<int?>("CDNAStart")
                        .HasColumnType("integer");

                    b.Property<int?>("CDSEnd")
                        .HasColumnType("integer");

                    b.Property<int?>("CDSStart")
                        .HasColumnType("integer");

                    b.Property<string>("CodonChange")
                        .HasColumnType("text");

                    b.Property<int>("GeneId")
                        .HasColumnType("integer");

                    b.Property<long>("MutationId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ProteinEnd")
                        .HasColumnType("integer");

                    b.Property<int?>("ProteinStart")
                        .HasColumnType("integer");

                    b.Property<int>("TranscriptId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasAlternateKey("MutationId", "GeneId", "TranscriptId");

                    b.HasIndex("GeneId");

                    b.HasIndex("TranscriptId");

                    b.ToTable("AffectedTranscripts");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.AffectedTranscriptConsequence", b =>
                {
                    b.Property<long>("AffectedTranscriptId")
                        .HasColumnType("bigint");

                    b.Property<int>("ConsequenceId")
                        .HasColumnType("integer");

                    b.HasKey("AffectedTranscriptId", "ConsequenceId");

                    b.HasIndex("ConsequenceId");

                    b.ToTable("AffectedTranscriptConsequences");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.AnalysedSample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AnalysisId")
                        .HasColumnType("integer");

                    b.Property<int>("SampleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasAlternateKey("AnalysisId", "SampleId");

                    b.HasIndex("SampleId");

                    b.ToTable("AnalysedSamples");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.Analysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("FileId")
                        .HasColumnType("integer");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FileId")
                        .IsUnique();

                    b.HasIndex("ReferenceId");

                    b.HasIndex("TypeId");

                    b.ToTable("Analyses");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.Biotype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("Biotypes");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.Consequence", b =>
                {
                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.Property<int>("ImpactId")
                        .HasColumnType("integer");

                    b.Property<int>("Severity")
                        .HasColumnType("integer");

                    b.HasKey("TypeId");

                    b.ToTable("Consequences");

                    b.HasData(
                        new
                        {
                            TypeId = 1,
                            ImpactId = 1,
                            Severity = 1
                        },
                        new
                        {
                            TypeId = 2,
                            ImpactId = 1,
                            Severity = 2
                        },
                        new
                        {
                            TypeId = 3,
                            ImpactId = 1,
                            Severity = 3
                        },
                        new
                        {
                            TypeId = 4,
                            ImpactId = 1,
                            Severity = 4
                        },
                        new
                        {
                            TypeId = 5,
                            ImpactId = 1,
                            Severity = 5
                        },
                        new
                        {
                            TypeId = 6,
                            ImpactId = 1,
                            Severity = 6
                        },
                        new
                        {
                            TypeId = 7,
                            ImpactId = 1,
                            Severity = 7
                        },
                        new
                        {
                            TypeId = 8,
                            ImpactId = 1,
                            Severity = 8
                        },
                        new
                        {
                            TypeId = 9,
                            ImpactId = 2,
                            Severity = 9
                        },
                        new
                        {
                            TypeId = 10,
                            ImpactId = 2,
                            Severity = 10
                        },
                        new
                        {
                            TypeId = 11,
                            ImpactId = 2,
                            Severity = 11
                        },
                        new
                        {
                            TypeId = 12,
                            ImpactId = 2,
                            Severity = 12
                        },
                        new
                        {
                            TypeId = 13,
                            ImpactId = 3,
                            Severity = 13
                        },
                        new
                        {
                            TypeId = 14,
                            ImpactId = 3,
                            Severity = 14
                        },
                        new
                        {
                            TypeId = 15,
                            ImpactId = 3,
                            Severity = 15
                        },
                        new
                        {
                            TypeId = 16,
                            ImpactId = 3,
                            Severity = 16
                        },
                        new
                        {
                            TypeId = 17,
                            ImpactId = 3,
                            Severity = 17
                        },
                        new
                        {
                            TypeId = 18,
                            ImpactId = 4,
                            Severity = 18
                        },
                        new
                        {
                            TypeId = 19,
                            ImpactId = 4,
                            Severity = 19
                        },
                        new
                        {
                            TypeId = 20,
                            ImpactId = 4,
                            Severity = 20
                        },
                        new
                        {
                            TypeId = 21,
                            ImpactId = 4,
                            Severity = 21
                        },
                        new
                        {
                            TypeId = 22,
                            ImpactId = 4,
                            Severity = 22
                        },
                        new
                        {
                            TypeId = 23,
                            ImpactId = 4,
                            Severity = 23
                        },
                        new
                        {
                            TypeId = 24,
                            ImpactId = 4,
                            Severity = 24
                        },
                        new
                        {
                            TypeId = 25,
                            ImpactId = 4,
                            Severity = 25
                        },
                        new
                        {
                            TypeId = 26,
                            ImpactId = 4,
                            Severity = 26
                        },
                        new
                        {
                            TypeId = 27,
                            ImpactId = 4,
                            Severity = 27
                        },
                        new
                        {
                            TypeId = 28,
                            ImpactId = 4,
                            Severity = 28
                        },
                        new
                        {
                            TypeId = 29,
                            ImpactId = 4,
                            Severity = 29
                        },
                        new
                        {
                            TypeId = 30,
                            ImpactId = 4,
                            Severity = 30
                        },
                        new
                        {
                            TypeId = 31,
                            ImpactId = 2,
                            Severity = 31
                        },
                        new
                        {
                            TypeId = 32,
                            ImpactId = 4,
                            Severity = 32
                        },
                        new
                        {
                            TypeId = 33,
                            ImpactId = 4,
                            Severity = 33
                        },
                        new
                        {
                            TypeId = 34,
                            ImpactId = 4,
                            Severity = 34
                        },
                        new
                        {
                            TypeId = 35,
                            ImpactId = 4,
                            Severity = 35
                        },
                        new
                        {
                            TypeId = 36,
                            ImpactId = 4,
                            Severity = 36
                        });
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.Gene", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BiotypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("ChromosomeId")
                        .HasColumnType("integer");

                    b.Property<int?>("End")
                        .HasColumnType("integer");

                    b.Property<int?>("Start")
                        .HasColumnType("integer");

                    b.Property<bool?>("Strand")
                        .HasColumnType("boolean");

                    b.Property<string>("Symbol")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BiotypeId");

                    b.ToTable("Genes");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.GeneInfo", b =>
                {
                    b.Property<int>("GeneId")
                        .HasColumnType("integer");

                    b.Property<string>("EnsemblId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("GeneId");

                    b.HasIndex("EnsemblId")
                        .IsUnique();

                    b.ToTable("GeneInfo");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.MatchedSample", b =>
                {
                    b.Property<int>("AnalysedSampleId")
                        .HasColumnType("integer");

                    b.Property<int>("MatchedSampleId")
                        .HasColumnType("integer");

                    b.HasKey("AnalysedSampleId", "MatchedSampleId");

                    b.HasIndex("MatchedSampleId");

                    b.ToTable("MatchedSamples");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.Mutation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AlternateBase")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("ChromosomeId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("End")
                        .HasColumnType("integer");

                    b.Property<string>("ReferenceBase")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("SequenceTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("Start")
                        .HasColumnType("integer");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasAlternateKey("Code");

                    b.HasIndex("ChromosomeId");

                    b.HasIndex("SequenceTypeId");

                    b.HasIndex("TypeId");

                    b.ToTable("Mutations");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.MutationOccurrence", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AnalysedSampleId")
                        .HasColumnType("integer");

                    b.Property<long>("MutationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasAlternateKey("MutationId", "AnalysedSampleId");

                    b.HasIndex("AnalysedSampleId");

                    b.ToTable("MutationOccurrences");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("SpecimenId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReferenceId");

                    b.HasIndex("SpecimenId");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.Transcript", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BiotypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("ChromosomeId")
                        .HasColumnType("integer");

                    b.Property<int?>("End")
                        .HasColumnType("integer");

                    b.Property<int?>("Start")
                        .HasColumnType("integer");

                    b.Property<bool?>("Strand")
                        .HasColumnType("boolean");

                    b.Property<string>("Symbol")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BiotypeId");

                    b.ToTable("Transcripts");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.TranscriptInfo", b =>
                {
                    b.Property<int>("TranscriptId")
                        .HasColumnType("integer");

                    b.Property<string>("EnsemblId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("TranscriptId");

                    b.HasIndex("EnsemblId")
                        .IsUnique();

                    b.ToTable("TranscriptInfo");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Cells.CellLine", b =>
                {
                    b.Property<int>("SpecimenId")
                        .HasColumnType("integer");

                    b.Property<int?>("CultureTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("PassageNumber")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("SpeciesId")
                        .HasColumnType("integer");

                    b.Property<int?>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("SpecimenId");

                    b.HasIndex("CultureTypeId");

                    b.HasIndex("ReferenceId");

                    b.HasIndex("SpeciesId");

                    b.HasIndex("TypeId");

                    b.ToTable("CellLines");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Cells.CellLineInfo", b =>
                {
                    b.Property<int>("SpecimenId")
                        .HasColumnType("integer");

                    b.Property<string>("AtccLink")
                        .HasColumnType("text");

                    b.Property<string>("DepositorEstablishment")
                        .HasColumnType("text");

                    b.Property<string>("DepositorName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EstablishmentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExPasyLink")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PubMedLink")
                        .HasColumnType("text");

                    b.HasKey("SpecimenId");

                    b.ToTable("CellLineInfo");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Specimen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DonorId")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DonorId");

                    b.HasIndex("ParentId");

                    b.ToTable("Specimens");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Tissues.Tissue", b =>
                {
                    b.Property<int>("SpecimenId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ExtractionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("SourceId")
                        .HasColumnType("integer");

                    b.Property<int?>("TumorTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("SpecimenId");

                    b.HasIndex("ReferenceId");

                    b.HasIndex("SourceId");

                    b.HasIndex("TumorTypeId");

                    b.HasIndex("TypeId");

                    b.ToTable("Tissues");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Tissues.TissueSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("TissueSources");
                });

            modelBuilder.Entity("Unite.Data.Entities.Tasks.Task", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TargetTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TargetTypeId");

                    b.HasIndex("TypeId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Clinical.Enums.Gender>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Name = "Female",
                            Value = "Female"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Male",
                            Value = "Male"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Other",
                            Value = "Other"
                        });
                });

            modelBuilder.Entity("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Molecular.Enums.GeneExpressionSubtype>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("GeneExpressionSubtypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Classical",
                            Value = "Classical"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mesenchymal",
                            Value = "Mesenchymal"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Proneural",
                            Value = "Proneural"
                        });
                });

            modelBuilder.Entity("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Molecular.Enums.IDHMutation>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("IDHMutations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "IDH1 R132H",
                            Value = "IDH1 R132H"
                        },
                        new
                        {
                            Id = 2,
                            Name = "IDH1 R132C",
                            Value = "IDH1 R132C"
                        },
                        new
                        {
                            Id = 3,
                            Name = "IDH1 R132G",
                            Value = "IDH1 R132G"
                        },
                        new
                        {
                            Id = 4,
                            Name = "IDH1 R132L",
                            Value = "IDH1 R132L"
                        },
                        new
                        {
                            Id = 5,
                            Name = "IDH1 R132S",
                            Value = "IDH1 R132S"
                        },
                        new
                        {
                            Id = 6,
                            Name = "IDH2 R172G",
                            Value = "IDH2 R172G"
                        },
                        new
                        {
                            Id = 7,
                            Name = "IDH2 R172W",
                            Value = "IDH2 R172W"
                        },
                        new
                        {
                            Id = 8,
                            Name = "IDH2 R172K",
                            Value = "IDH2 R172K"
                        },
                        new
                        {
                            Id = 9,
                            Name = "IDH2 R172T",
                            Value = "IDH2 R172T"
                        },
                        new
                        {
                            Id = 10,
                            Name = "IDH2 R172M",
                            Value = "IDH2 R172M"
                        },
                        new
                        {
                            Id = 11,
                            Name = "IDH2 R172S",
                            Value = "IDH2 R172S"
                        });
                });

            modelBuilder.Entity("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Molecular.Enums.IDHStatus>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("IDHStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Wild Type",
                            Value = "Wild Type"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mutant",
                            Value = "Mutant"
                        });
                });

            modelBuilder.Entity("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Molecular.Enums.MethylationStatus>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("MethylationStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Unmethylated",
                            Value = "Unmethylated"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Methylated",
                            Value = "Methylated"
                        });
                });

            modelBuilder.Entity("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Molecular.Enums.MethylationType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("MethylationTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "H3-K27",
                            Value = "H3-K27"
                        },
                        new
                        {
                            Id = 2,
                            Name = "H3-G34",
                            Value = "H3-G34"
                        },
                        new
                        {
                            Id = 3,
                            Name = "RTKI",
                            Value = "RTKI"
                        },
                        new
                        {
                            Id = 4,
                            Name = "RTKII",
                            Value = "RTKII"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Mesenchymal",
                            Value = "Mesenchymal"
                        });
                });

            modelBuilder.Entity("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Mutations.Enums.AnalysisType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("AnalysisTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "WGS",
                            Value = "WGS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "WES",
                            Value = "WES"
                        },
                        new
                        {
                            Id = 3,
                            Name = "WGA",
                            Value = "WGA"
                        },
                        new
                        {
                            Id = 4,
                            Name = "RNASeq",
                            Value = "RNASeq"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Validation",
                            Value = "Validation"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Amplicon",
                            Value = "Amplicon"
                        });
                });

            modelBuilder.Entity("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Mutations.Enums.Chromosome>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("Chromosomes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Chromosome 1",
                            Value = "1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Chromosome 2",
                            Value = "2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Chromosome 3",
                            Value = "3"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Chromosome 4",
                            Value = "4"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Chromosome 5",
                            Value = "5"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Chromosome 6",
                            Value = "6"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Chromosome 7",
                            Value = "7"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Chromosome 8",
                            Value = "8"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Chromosome 9",
                            Value = "9"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Chromosome 10",
                            Value = "10"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Chromosome 11",
                            Value = "11"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Chromosome 12",
                            Value = "12"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Chromosome 13",
                            Value = "13"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Chromosome 14",
                            Value = "14"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Chromosome 15",
                            Value = "15"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Chromosome 16",
                            Value = "16"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Chromosome 17",
                            Value = "17"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Chromosome 18",
                            Value = "18"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Chromosome 19",
                            Value = "19"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Chromosome 20",
                            Value = "20"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Chromosome 21",
                            Value = "21"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Chromosome 22",
                            Value = "22"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Chromosome X",
                            Value = "X"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Chromosome Y",
                            Value = "Y"
                        });
                });

            modelBuilder.Entity("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Mutations.Enums.ConsequenceImpact>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("ConsequenceImpacts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "High",
                            Value = "High"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Moderate",
                            Value = "Moderate"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Low",
                            Value = "Low"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Unknown",
                            Value = "Unknown"
                        });
                });

            modelBuilder.Entity("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Mutations.Enums.ConsequenceType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("ConsequenceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Transcript ablation",
                            Value = "transcript_ablation"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Splice acceptor variant",
                            Value = "splice_acceptor_variant"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Splice donor variant",
                            Value = "splice_donor_variant"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Stop gained",
                            Value = "stop_gained"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Frameshift variant",
                            Value = "frameshift_variant"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Stop lost",
                            Value = "stop_lost"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Start lost",
                            Value = "start_lost"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Transcript amplification",
                            Value = "transcript_amplification"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Inframe insertion",
                            Value = "inframe_insertion"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Inframe deletion",
                            Value = "inframe_deletion"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Missense variant",
                            Value = "missense_variant"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Protein altering variant",
                            Value = "protein_altering_variant"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Splice region variant",
                            Value = "splice_region_variant"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Incomplete terminal codon variant",
                            Value = "incomplete_terminal_codon_variant"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Start retained variant",
                            Value = "start_retained_variant"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Stop retained variant",
                            Value = "stop_retained_variant"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Synonymous variant",
                            Value = "synonymous_variant"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Coding sequence variant",
                            Value = "coding_sequence_variant"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Mature miRNA variant",
                            Value = "mature_miRNA_variant"
                        },
                        new
                        {
                            Id = 20,
                            Name = "5 prime UTR variant",
                            Value = "5_prime_UTR_variant"
                        },
                        new
                        {
                            Id = 21,
                            Name = "3 prime UTR variant",
                            Value = "3_prime_UTR_variant"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Non coding transcript exon variant",
                            Value = "non_coding_transcript_exon_variant"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Intron variant",
                            Value = "intron_variant"
                        },
                        new
                        {
                            Id = 24,
                            Name = "NMD transcript variant",
                            Value = "NMD_transcript_variant"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Non coding transcript variant",
                            Value = "non_coding_transcript_variant"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Upstream gene variant",
                            Value = "upstream_gene_variant"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Downstream gene variant",
                            Value = "downstream_gene_variant"
                        },
                        new
                        {
                            Id = 28,
                            Name = "TFBS ablation",
                            Value = "TFBS_ablation"
                        },
                        new
                        {
                            Id = 29,
                            Name = "TFBS amplification",
                            Value = "TFBS_amplification"
                        },
                        new
                        {
                            Id = 30,
                            Name = "TF binding site variant",
                            Value = "TF_binding_site_variant"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Regulatory region ablation",
                            Value = "regulatory_region_ablation"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Regulatory region amplification",
                            Value = "regulatory_region_amplification"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Feature elongation",
                            Value = "feature_elongation"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Regulatory region variant",
                            Value = "regulatory_region_variant"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Feature truncation",
                            Value = "feature_truncation"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Intergenic variant",
                            Value = "intergenic_variant"
                        });
                });

            modelBuilder.Entity("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Mutations.Enums.MutationType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("MutationTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Single Nucleotide Variant",
                            Value = "SNV"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Insertion",
                            Value = "INS"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Deletion",
                            Value = "DEL"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Multiple Nucleotide Variant",
                            Value = "MNV"
                        });
                });

            modelBuilder.Entity("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Mutations.Enums.SequenceType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("SequenceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Coding DNA",
                            Value = "c"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Non Coding DNA",
                            Value = "n"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Linear Genomic DNA",
                            Value = "g"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Curcular Genomic DNA",
                            Value = "o"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Mitochondrial DNA",
                            Value = "m"
                        },
                        new
                        {
                            Id = 6,
                            Name = "RNA",
                            Value = "r"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Protein",
                            Value = "p"
                        });
                });

            modelBuilder.Entity("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Specimens.Cells.Enums.CellLineCultureType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("CellLineCultureTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Suspension",
                            Value = "Suspension"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Adherent",
                            Value = "Adherent"
                        });
                });

            modelBuilder.Entity("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Specimens.Cells.Enums.CellLineType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("CellLineTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Stem Cell",
                            Value = "Stem Cell"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Differentiated",
                            Value = "Differentiated"
                        });
                });

            modelBuilder.Entity("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Specimens.Cells.Enums.Species>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("Species");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Human",
                            Value = "Human"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mouse",
                            Value = "Mouse"
                        });
                });

            modelBuilder.Entity("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Specimens.Tissues.Enums.TissueType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("TissueTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Control",
                            Value = "Control"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Tumor",
                            Value = "Tumor"
                        });
                });

            modelBuilder.Entity("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Specimens.Tissues.Enums.TumorType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("TumorTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Primary",
                            Value = "Primary"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Metastasis",
                            Value = "Metastasis"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Recurrent",
                            Value = "Recurrent"
                        });
                });

            modelBuilder.Entity("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Tasks.Enums.TaskTargetType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("TaskTargetTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Donor",
                            Value = "Donor"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Specimen",
                            Value = "Specimen"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mutation",
                            Value = "Mutation"
                        });
                });

            modelBuilder.Entity("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Tasks.Enums.TaskType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("TaskTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Indexing",
                            Value = "Indexing"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Anotation",
                            Value = "Anotation"
                        });
                });

            modelBuilder.Entity("Unite.Data.Entities.Clinical.ClinicalData", b =>
                {
                    b.HasOne("Unite.Data.Entities.Donors.Donor", null)
                        .WithOne("ClinicalData")
                        .HasForeignKey("Unite.Data.Entities.Clinical.ClinicalData", "DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Clinical.Enums.Gender>", null)
                        .WithMany()
                        .HasForeignKey("GenderId");

                    b.HasOne("Unite.Data.Entities.Clinical.TumourLocalization", "Localization")
                        .WithMany()
                        .HasForeignKey("LocalizationId");

                    b.HasOne("Unite.Data.Entities.Clinical.TumourPrimarySite", "PrimarySite")
                        .WithMany()
                        .HasForeignKey("PrimarySiteId");

                    b.Navigation("Localization");

                    b.Navigation("PrimarySite");
                });

            modelBuilder.Entity("Unite.Data.Entities.Clinical.Treatment", b =>
                {
                    b.HasOne("Unite.Data.Entities.Donors.Donor", null)
                        .WithMany("Treatments")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Clinical.Therapy", "Therapy")
                        .WithMany()
                        .HasForeignKey("TherapyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Therapy");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.StudyDonor", b =>
                {
                    b.HasOne("Unite.Data.Entities.Donors.Donor", "Donor")
                        .WithMany("DonorStudies")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Donors.Study", "Study")
                        .WithMany("StudyDonors")
                        .HasForeignKey("StudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donor");

                    b.Navigation("Study");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.WorkPackageDonor", b =>
                {
                    b.HasOne("Unite.Data.Entities.Donors.Donor", "Donor")
                        .WithMany("DonorWorkPackages")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Donors.WorkPackage", "WorkPackage")
                        .WithMany("WorkPackageDonors")
                        .HasForeignKey("WorkPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donor");

                    b.Navigation("WorkPackage");
                });

            modelBuilder.Entity("Unite.Data.Entities.Identity.UserSession", b =>
                {
                    b.HasOne("Unite.Data.Entities.Identity.User", "User")
                        .WithMany("UserSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Unite.Data.Entities.Molecular.MolecularData", b =>
                {
                    b.HasOne("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Molecular.Enums.GeneExpressionSubtype>", null)
                        .WithMany()
                        .HasForeignKey("GeneExpressionSubtypeId");

                    b.HasOne("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Molecular.Enums.IDHMutation>", null)
                        .WithMany()
                        .HasForeignKey("IdhMutationId");

                    b.HasOne("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Molecular.Enums.IDHStatus>", null)
                        .WithMany()
                        .HasForeignKey("IdhStatusId");

                    b.HasOne("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Molecular.Enums.MethylationStatus>", null)
                        .WithMany()
                        .HasForeignKey("MethylationStatusId");

                    b.HasOne("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Molecular.Enums.MethylationType>", null)
                        .WithMany()
                        .HasForeignKey("MethylationTypeId");

                    b.HasOne("Unite.Data.Entities.Specimens.Specimen", null)
                        .WithOne("MolecularData")
                        .HasForeignKey("Unite.Data.Entities.Molecular.MolecularData", "SpecimenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.AffectedTranscript", b =>
                {
                    b.HasOne("Unite.Data.Entities.Mutations.Gene", "Gene")
                        .WithMany()
                        .HasForeignKey("GeneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Mutations.Mutation", "Mutation")
                        .WithMany("AffectedTranscripts")
                        .HasForeignKey("MutationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Mutations.Transcript", "Transcript")
                        .WithMany()
                        .HasForeignKey("TranscriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gene");

                    b.Navigation("Mutation");

                    b.Navigation("Transcript");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.AffectedTranscriptConsequence", b =>
                {
                    b.HasOne("Unite.Data.Entities.Mutations.AffectedTranscript", "AffectedTranscript")
                        .WithMany("Consequences")
                        .HasForeignKey("AffectedTranscriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Mutations.Consequence", "Consequence")
                        .WithMany()
                        .HasForeignKey("ConsequenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AffectedTranscript");

                    b.Navigation("Consequence");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.AnalysedSample", b =>
                {
                    b.HasOne("Unite.Data.Entities.Mutations.Analysis", "Analysis")
                        .WithMany("AnalysedSamples")
                        .HasForeignKey("AnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Mutations.Sample", "Sample")
                        .WithMany()
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Analysis");

                    b.Navigation("Sample");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.Analysis", b =>
                {
                    b.HasOne("Unite.Data.Entities.File", "File")
                        .WithOne()
                        .HasForeignKey("Unite.Data.Entities.Mutations.Analysis", "FileId");

                    b.HasOne("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Mutations.Enums.AnalysisType>", null)
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.Navigation("File");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.Gene", b =>
                {
                    b.HasOne("Unite.Data.Entities.Mutations.Biotype", "Biotype")
                        .WithMany()
                        .HasForeignKey("BiotypeId");

                    b.Navigation("Biotype");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.GeneInfo", b =>
                {
                    b.HasOne("Unite.Data.Entities.Mutations.Gene", null)
                        .WithOne("Info")
                        .HasForeignKey("Unite.Data.Entities.Mutations.GeneInfo", "GeneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.MatchedSample", b =>
                {
                    b.HasOne("Unite.Data.Entities.Mutations.AnalysedSample", "Analysed")
                        .WithMany("MatchedSamples")
                        .HasForeignKey("AnalysedSampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Mutations.AnalysedSample", "Matched")
                        .WithMany()
                        .HasForeignKey("MatchedSampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Analysed");

                    b.Navigation("Matched");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.Mutation", b =>
                {
                    b.HasOne("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Mutations.Enums.Chromosome>", null)
                        .WithMany()
                        .HasForeignKey("ChromosomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Mutations.Enums.SequenceType>", null)
                        .WithMany()
                        .HasForeignKey("SequenceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Mutations.Enums.MutationType>", null)
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.MutationOccurrence", b =>
                {
                    b.HasOne("Unite.Data.Entities.Mutations.AnalysedSample", "AnalysedSample")
                        .WithMany("MutationOccurrences")
                        .HasForeignKey("AnalysedSampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Mutations.Mutation", "Mutation")
                        .WithMany("MutationOccurrences")
                        .HasForeignKey("MutationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnalysedSample");

                    b.Navigation("Mutation");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.Sample", b =>
                {
                    b.HasOne("Unite.Data.Entities.Specimens.Specimen", "Specimen")
                        .WithMany("Samples")
                        .HasForeignKey("SpecimenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specimen");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.Transcript", b =>
                {
                    b.HasOne("Unite.Data.Entities.Mutations.Biotype", "Biotype")
                        .WithMany()
                        .HasForeignKey("BiotypeId");

                    b.Navigation("Biotype");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.TranscriptInfo", b =>
                {
                    b.HasOne("Unite.Data.Entities.Mutations.Transcript", null)
                        .WithOne("Info")
                        .HasForeignKey("Unite.Data.Entities.Mutations.TranscriptInfo", "TranscriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Cells.CellLine", b =>
                {
                    b.HasOne("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Specimens.Cells.Enums.CellLineCultureType>", null)
                        .WithMany()
                        .HasForeignKey("CultureTypeId");

                    b.HasOne("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Specimens.Cells.Enums.Species>", null)
                        .WithMany()
                        .HasForeignKey("SpeciesId");

                    b.HasOne("Unite.Data.Entities.Specimens.Specimen", null)
                        .WithOne("CellLine")
                        .HasForeignKey("Unite.Data.Entities.Specimens.Cells.CellLine", "SpecimenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Specimens.Cells.Enums.CellLineType>", null)
                        .WithMany()
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Cells.CellLineInfo", b =>
                {
                    b.HasOne("Unite.Data.Entities.Specimens.Cells.CellLine", null)
                        .WithOne("Info")
                        .HasForeignKey("Unite.Data.Entities.Specimens.Cells.CellLineInfo", "SpecimenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Specimen", b =>
                {
                    b.HasOne("Unite.Data.Entities.Donors.Donor", "Donor")
                        .WithMany("Specimens")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Specimens.Specimen", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Donor");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Tissues.Tissue", b =>
                {
                    b.HasOne("Unite.Data.Entities.Specimens.Tissues.TissueSource", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.HasOne("Unite.Data.Entities.Specimens.Specimen", null)
                        .WithOne("Tissue")
                        .HasForeignKey("Unite.Data.Entities.Specimens.Tissues.Tissue", "SpecimenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Specimens.Tissues.Enums.TumorType>", null)
                        .WithMany()
                        .HasForeignKey("TumorTypeId");

                    b.HasOne("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Specimens.Tissues.Enums.TissueType>", null)
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Unite.Data.Entities.Tasks.Task", b =>
                {
                    b.HasOne("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Tasks.Enums.TaskTargetType>", null)
                        .WithMany()
                        .HasForeignKey("TargetTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Tasks.Enums.TaskType>", null)
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.Donor", b =>
                {
                    b.Navigation("ClinicalData");

                    b.Navigation("DonorStudies");

                    b.Navigation("DonorWorkPackages");

                    b.Navigation("Specimens");

                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.Study", b =>
                {
                    b.Navigation("StudyDonors");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.WorkPackage", b =>
                {
                    b.Navigation("WorkPackageDonors");
                });

            modelBuilder.Entity("Unite.Data.Entities.Identity.User", b =>
                {
                    b.Navigation("UserSessions");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.AffectedTranscript", b =>
                {
                    b.Navigation("Consequences");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.AnalysedSample", b =>
                {
                    b.Navigation("MatchedSamples");

                    b.Navigation("MutationOccurrences");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.Analysis", b =>
                {
                    b.Navigation("AnalysedSamples");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.Gene", b =>
                {
                    b.Navigation("Info");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.Mutation", b =>
                {
                    b.Navigation("AffectedTranscripts");

                    b.Navigation("MutationOccurrences");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.Transcript", b =>
                {
                    b.Navigation("Info");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Cells.CellLine", b =>
                {
                    b.Navigation("Info");
                });

            modelBuilder.Entity("Unite.Data.Entities.Specimens.Specimen", b =>
                {
                    b.Navigation("CellLine");

                    b.Navigation("Children");

                    b.Navigation("MolecularData");

                    b.Navigation("Samples");

                    b.Navigation("Tissue");
                });
#pragma warning restore 612, 618
        }
    }
}
