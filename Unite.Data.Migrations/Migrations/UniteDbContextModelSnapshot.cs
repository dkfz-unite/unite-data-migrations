// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Unite.Data.Services;

namespace Unite.Data.Migrations.Migrations
{
    [DbContext(typeof(UniteDbContext))]
    partial class UniteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Unite.Data.Entities.Donors.ClinicalData", b =>
                {
                    b.Property<string>("DonorId")
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<int?>("AgeCategoryId")
                        .HasColumnType("integer");

                    b.Property<int?>("GenderId")
                        .HasColumnType("integer");

                    b.Property<int?>("KpsBaseline")
                        .HasColumnType("integer");

                    b.Property<int?>("LocalizationId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ProgressionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ProgressionFreeDays")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("RelapseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("RelapseFreeDays")
                        .HasColumnType("integer");

                    b.Property<bool?>("SteroidsBaseline")
                        .HasColumnType("boolean");

                    b.Property<int?>("SurvivalDays")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("VitalStatusChangeDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("VitalStatusId")
                        .HasColumnType("integer");

                    b.HasKey("DonorId");

                    b.HasIndex("AgeCategoryId");

                    b.HasIndex("GenderId");

                    b.HasIndex("LocalizationId");

                    b.HasIndex("VitalStatusId");

                    b.ToTable("ClinicalData");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.Donor", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Diagnosis")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("DiagnosisDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("MtaProtected")
                        .HasColumnType("boolean");

                    b.Property<string>("Origin")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("PrimarySiteId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PrimarySiteId");

                    b.ToTable("Donors");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.Localization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("Localizations");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.PrimarySite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("PrimarySites");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.Study", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Studies");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.StudyDonor", b =>
                {
                    b.Property<int>("StudyId")
                        .HasColumnType("integer");

                    b.Property<string>("DonorId")
                        .HasColumnType("character varying(100)");

                    b.HasKey("StudyId", "DonorId");

                    b.HasIndex("DonorId");

                    b.ToTable("StudyDonors");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.Therapy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Therapies");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.Treatment", b =>
                {
                    b.Property<string>("DonorId")
                        .HasColumnType("character varying(100)");

                    b.Property<int>("TherapyId")
                        .HasColumnType("integer");

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Results")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("DonorId", "TherapyId");

                    b.HasIndex("TherapyId");

                    b.ToTable("Treatments");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.WorkPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("WorkPackages");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.WorkPackageDonor", b =>
                {
                    b.Property<int>("WorkPackageId")
                        .HasColumnType("integer");

                    b.Property<string>("DonorId")
                        .HasColumnType("character varying(100)");

                    b.HasKey("WorkPackageId", "DonorId");

                    b.HasIndex("DonorId");

                    b.ToTable("WorkPackageDonors");
                });

            modelBuilder.Entity("Unite.Data.Entities.Epigenetics.EpigeneticsData", b =>
                {
                    b.Property<string>("DonorId")
                        .HasColumnType("character varying(100)");

                    b.Property<bool?>("GcimpMethylation")
                        .HasColumnType("boolean");

                    b.Property<int?>("GeneExpressionSubtypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("IdhMutationId")
                        .HasColumnType("integer");

                    b.Property<int?>("IdhStatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("MethylationStatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("MethylationSubtypeId")
                        .HasColumnType("integer");

                    b.HasKey("DonorId");

                    b.HasIndex("GeneExpressionSubtypeId");

                    b.HasIndex("IdhMutationId");

                    b.HasIndex("IdhStatusId");

                    b.HasIndex("MethylationStatusId");

                    b.HasIndex("MethylationSubtypeId");

                    b.ToTable("EpigeneticsData");
                });

            modelBuilder.Entity("Unite.Data.Entities.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Unite.Data.Entities.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasAlternateKey("Email");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Unite.Data.Entities.Identity.UserSession", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("Session")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Client")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("UserId", "Session");

                    b.HasIndex("Session");

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.AnalysedSample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AnalysisId")
                        .HasColumnType("integer");

                    b.Property<int>("SampleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasAlternateKey("AnalysisId", "SampleId");

                    b.HasIndex("SampleId");

                    b.ToTable("AnalysedSamples");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.Analysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DonorId")
                        .IsRequired()
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("FileId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DonorId");

                    b.HasIndex("FileId")
                        .IsUnique();

                    b.HasIndex("TypeId");

                    b.ToTable("Analyses");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.MatchedSample", b =>
                {
                    b.Property<int>("AnalysedSampleId")
                        .HasColumnType("integer");

                    b.Property<int>("MatchedSampleId")
                        .HasColumnType("integer");

                    b.HasKey("AnalysedSampleId", "MatchedSampleId");

                    b.HasIndex("MatchedSampleId");

                    b.ToTable("MatchedSamples");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.Mutation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AlternateBase")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("ChromosomeId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("End")
                        .HasColumnType("integer");

                    b.Property<string>("ReferenceBase")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("SequenceTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("Start")
                        .HasColumnType("integer");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasAlternateKey("Code");

                    b.HasIndex("ChromosomeId");

                    b.HasIndex("SequenceTypeId");

                    b.HasIndex("TypeId");

                    b.ToTable("Mutations");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.MutationOccurrence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AnalysedSampleId")
                        .HasColumnType("integer");

                    b.Property<int>("MutationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasAlternateKey("AnalysedSampleId", "MutationId");

                    b.HasIndex("MutationId");

                    b.ToTable("MutationOccurrences");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DonorId")
                        .IsRequired()
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("SubtypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DonorId");

                    b.HasIndex("SubtypeId");

                    b.HasIndex("TypeId");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Unite.Data.Entities.Tasks.DonorIndexingTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DonorId")
                        .IsRequired()
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("DonorId");

                    b.ToTable("DonorIndexingTasks");
                });

            modelBuilder.Entity("Unite.Data.Entities.Tasks.MutationIndexingTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MutationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MutationId");

                    b.ToTable("MutationIndexingTasks");
                });

            modelBuilder.Entity("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Donors.Enums.AgeCategory>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("AgeCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pediatric",
                            Value = "Pediatric"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Adult",
                            Value = "Adult"
                        });
                });

            modelBuilder.Entity("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Donors.Enums.Gender>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Name = "Female",
                            Value = "Female"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Male",
                            Value = "Male"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Other",
                            Value = "Other"
                        });
                });

            modelBuilder.Entity("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Donors.Enums.VitalStatus>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("VitalStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Living",
                            Value = "Living"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Deceased",
                            Value = "Deceased"
                        });
                });

            modelBuilder.Entity("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Epigenetics.Enums.GeneExpressionSubtype>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("GeneExpressionSubtypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Classical",
                            Value = "Classical"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mesenchymal",
                            Value = "Mesenchymal"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Proneural",
                            Value = "Proneural"
                        });
                });

            modelBuilder.Entity("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Epigenetics.Enums.IDHMutation>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("IDHMutations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "IDH1 R132H",
                            Value = "IDH1 R132H"
                        },
                        new
                        {
                            Id = 2,
                            Name = "IDH1 R132C",
                            Value = "IDH1 R132C"
                        },
                        new
                        {
                            Id = 3,
                            Name = "IDH1 R132G",
                            Value = "IDH1 R132G"
                        },
                        new
                        {
                            Id = 4,
                            Name = "IDH1 R132L",
                            Value = "IDH1 R132L"
                        },
                        new
                        {
                            Id = 5,
                            Name = "IDH1 R132S",
                            Value = "IDH1 R132S"
                        },
                        new
                        {
                            Id = 6,
                            Name = "IDH2 R172G",
                            Value = "IDH2 R172G"
                        },
                        new
                        {
                            Id = 7,
                            Name = "IDH2 R172W",
                            Value = "IDH2 R172W"
                        },
                        new
                        {
                            Id = 8,
                            Name = "IDH2 R172K",
                            Value = "IDH2 R172K"
                        },
                        new
                        {
                            Id = 9,
                            Name = "IDH2 R172T",
                            Value = "IDH2 R172T"
                        },
                        new
                        {
                            Id = 10,
                            Name = "IDH2 R172M",
                            Value = "IDH2 R172M"
                        },
                        new
                        {
                            Id = 11,
                            Name = "IDH2 R172S",
                            Value = "IDH2 R172S"
                        });
                });

            modelBuilder.Entity("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Epigenetics.Enums.IDHStatus>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("IDHStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "WildType",
                            Value = "WildType"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mutant",
                            Value = "Mutant"
                        });
                });

            modelBuilder.Entity("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Epigenetics.Enums.MethylationStatus>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("MethylationStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Unmethylated",
                            Value = "Unmethylated"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Methylated",
                            Value = "Methylated"
                        });
                });

            modelBuilder.Entity("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Epigenetics.Enums.MethylationSubtype>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("MethylationSubtypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "H3-K27",
                            Value = "H3-K27"
                        },
                        new
                        {
                            Id = 2,
                            Name = "H3-G34",
                            Value = "H3-G34"
                        },
                        new
                        {
                            Id = 3,
                            Name = "RTKI",
                            Value = "RTKI"
                        },
                        new
                        {
                            Id = 4,
                            Name = "RTKII",
                            Value = "RTKII"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Mesenchymal",
                            Value = "Mesenchymal"
                        });
                });

            modelBuilder.Entity("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Mutations.Enums.AnalysisType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("AnalysisTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "WGS",
                            Value = "WGS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "WES",
                            Value = "WES"
                        },
                        new
                        {
                            Id = 3,
                            Name = "WGA",
                            Value = "WGA"
                        },
                        new
                        {
                            Id = 4,
                            Name = "RNASeq",
                            Value = "RNASeq"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Validation",
                            Value = "Validation"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Amplicon",
                            Value = "Amplicon"
                        });
                });

            modelBuilder.Entity("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Mutations.Enums.Chromosome>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("Chromosomes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Chromosome 1",
                            Value = "1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Chromosome 2",
                            Value = "2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Chromosome 3",
                            Value = "3"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Chromosome 4",
                            Value = "4"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Chromosome 5",
                            Value = "5"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Chromosome 6",
                            Value = "6"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Chromosome 7",
                            Value = "7"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Chromosome 8",
                            Value = "8"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Chromosome 9",
                            Value = "9"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Chromosome 10",
                            Value = "10"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Chromosome 11",
                            Value = "11"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Chromosome 12",
                            Value = "12"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Chromosome 13",
                            Value = "13"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Chromosome 14",
                            Value = "14"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Chromosome 15",
                            Value = "15"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Chromosome 16",
                            Value = "16"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Chromosome 17",
                            Value = "17"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Chromosome 18",
                            Value = "18"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Chromosome 19",
                            Value = "19"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Chromosome 20",
                            Value = "20"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Chromosome 21",
                            Value = "21"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Chromosome 22",
                            Value = "22"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Chromosome X",
                            Value = "X"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Chromosome Y",
                            Value = "Y"
                        });
                });

            modelBuilder.Entity("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Mutations.Enums.MutationType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("MutationTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Single Nucleotide Variant",
                            Value = "SNV"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Insertion",
                            Value = "INS"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Deletion",
                            Value = "DEL"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Multiple Nucleotide Variant",
                            Value = "MNV"
                        });
                });

            modelBuilder.Entity("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Mutations.Enums.SampleSubtype>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("SampleSubtypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Primary",
                            Value = "Primary"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Recurrent",
                            Value = "Recurrent"
                        });
                });

            modelBuilder.Entity("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Mutations.Enums.SampleType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("SampleTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Control",
                            Value = "Control"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Tumor",
                            Value = "Tumor"
                        });
                });

            modelBuilder.Entity("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Mutations.Enums.SequenceType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Value");

                    b.ToTable("SequenceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Coding DNA",
                            Value = "c"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Non Coding DNA",
                            Value = "n"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Linear Genomic DNA",
                            Value = "g"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Curcular Genomic DNA",
                            Value = "o"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Mitochondrial DNA",
                            Value = "m"
                        },
                        new
                        {
                            Id = 6,
                            Name = "RNA",
                            Value = "r"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Protein",
                            Value = "p"
                        });
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.ClinicalData", b =>
                {
                    b.HasOne("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Donors.Enums.AgeCategory>", null)
                        .WithMany()
                        .HasForeignKey("AgeCategoryId");

                    b.HasOne("Unite.Data.Entities.Donors.Donor", null)
                        .WithOne("ClinicalData")
                        .HasForeignKey("Unite.Data.Entities.Donors.ClinicalData", "DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Donors.Enums.Gender>", null)
                        .WithMany()
                        .HasForeignKey("GenderId");

                    b.HasOne("Unite.Data.Entities.Donors.Localization", "Localization")
                        .WithMany()
                        .HasForeignKey("LocalizationId");

                    b.HasOne("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Donors.Enums.VitalStatus>", null)
                        .WithMany()
                        .HasForeignKey("VitalStatusId");

                    b.Navigation("Localization");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.Donor", b =>
                {
                    b.HasOne("Unite.Data.Entities.Donors.PrimarySite", "PrimarySite")
                        .WithMany()
                        .HasForeignKey("PrimarySiteId");

                    b.Navigation("PrimarySite");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.StudyDonor", b =>
                {
                    b.HasOne("Unite.Data.Entities.Donors.Donor", "Donor")
                        .WithMany("DonorStudies")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Donors.Study", "Study")
                        .WithMany("StudyDonors")
                        .HasForeignKey("StudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donor");

                    b.Navigation("Study");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.Treatment", b =>
                {
                    b.HasOne("Unite.Data.Entities.Donors.Donor", "Donor")
                        .WithMany("Treatments")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Donors.Therapy", "Therapy")
                        .WithMany()
                        .HasForeignKey("TherapyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donor");

                    b.Navigation("Therapy");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.WorkPackageDonor", b =>
                {
                    b.HasOne("Unite.Data.Entities.Donors.Donor", "Donor")
                        .WithMany("DonorWorkPackages")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Donors.WorkPackage", "WorkPackage")
                        .WithMany("WorkPackageDonors")
                        .HasForeignKey("WorkPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donor");

                    b.Navigation("WorkPackage");
                });

            modelBuilder.Entity("Unite.Data.Entities.Epigenetics.EpigeneticsData", b =>
                {
                    b.HasOne("Unite.Data.Entities.Donors.Donor", null)
                        .WithOne("EpigeneticsData")
                        .HasForeignKey("Unite.Data.Entities.Epigenetics.EpigeneticsData", "DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Epigenetics.Enums.GeneExpressionSubtype>", null)
                        .WithMany()
                        .HasForeignKey("GeneExpressionSubtypeId");

                    b.HasOne("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Epigenetics.Enums.IDHMutation>", null)
                        .WithMany()
                        .HasForeignKey("IdhMutationId");

                    b.HasOne("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Epigenetics.Enums.IDHStatus>", null)
                        .WithMany()
                        .HasForeignKey("IdhStatusId");

                    b.HasOne("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Epigenetics.Enums.MethylationStatus>", null)
                        .WithMany()
                        .HasForeignKey("MethylationStatusId");

                    b.HasOne("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Epigenetics.Enums.MethylationSubtype>", null)
                        .WithMany()
                        .HasForeignKey("MethylationSubtypeId");
                });

            modelBuilder.Entity("Unite.Data.Entities.Identity.UserSession", b =>
                {
                    b.HasOne("Unite.Data.Entities.Identity.User", "User")
                        .WithMany("UserSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.AnalysedSample", b =>
                {
                    b.HasOne("Unite.Data.Entities.Mutations.Analysis", "Analysis")
                        .WithMany("AnalysedSamples")
                        .HasForeignKey("AnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Mutations.Sample", "Sample")
                        .WithMany("SampleAnalises")
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Analysis");

                    b.Navigation("Sample");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.Analysis", b =>
                {
                    b.HasOne("Unite.Data.Entities.Donors.Donor", "Donor")
                        .WithMany("Analyses")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.File", "File")
                        .WithOne()
                        .HasForeignKey("Unite.Data.Entities.Mutations.Analysis", "FileId");

                    b.HasOne("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Mutations.Enums.AnalysisType>", null)
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.Navigation("Donor");

                    b.Navigation("File");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.MatchedSample", b =>
                {
                    b.HasOne("Unite.Data.Entities.Mutations.AnalysedSample", "Analysed")
                        .WithMany("MatchedSamples")
                        .HasForeignKey("AnalysedSampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Mutations.AnalysedSample", "Matched")
                        .WithMany()
                        .HasForeignKey("MatchedSampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Analysed");

                    b.Navigation("Matched");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.Mutation", b =>
                {
                    b.HasOne("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Mutations.Enums.Chromosome>", null)
                        .WithMany()
                        .HasForeignKey("ChromosomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Mutations.Enums.SequenceType>", null)
                        .WithMany()
                        .HasForeignKey("SequenceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Mutations.Enums.MutationType>", null)
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.MutationOccurrence", b =>
                {
                    b.HasOne("Unite.Data.Entities.Mutations.AnalysedSample", "AnalysedSample")
                        .WithMany("MutationOccurrences")
                        .HasForeignKey("AnalysedSampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Entities.Mutations.Mutation", "Mutation")
                        .WithMany("MutationOccurrences")
                        .HasForeignKey("MutationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnalysedSample");

                    b.Navigation("Mutation");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.Sample", b =>
                {
                    b.HasOne("Unite.Data.Entities.Donors.Donor", "Donor")
                        .WithMany("Samples")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Mutations.Enums.SampleSubtype>", null)
                        .WithMany()
                        .HasForeignKey("SubtypeId");

                    b.HasOne("Unite.Data.Services.Entities.EnumValue<Unite.Data.Entities.Mutations.Enums.SampleType>", null)
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.Navigation("Donor");
                });

            modelBuilder.Entity("Unite.Data.Entities.Tasks.DonorIndexingTask", b =>
                {
                    b.HasOne("Unite.Data.Entities.Donors.Donor", "Donor")
                        .WithMany()
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donor");
                });

            modelBuilder.Entity("Unite.Data.Entities.Tasks.MutationIndexingTask", b =>
                {
                    b.HasOne("Unite.Data.Entities.Mutations.Mutation", "Mutation")
                        .WithMany()
                        .HasForeignKey("MutationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mutation");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.Donor", b =>
                {
                    b.Navigation("Analyses");

                    b.Navigation("ClinicalData");

                    b.Navigation("DonorStudies");

                    b.Navigation("DonorWorkPackages");

                    b.Navigation("EpigeneticsData");

                    b.Navigation("Samples");

                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.Study", b =>
                {
                    b.Navigation("StudyDonors");
                });

            modelBuilder.Entity("Unite.Data.Entities.Donors.WorkPackage", b =>
                {
                    b.Navigation("WorkPackageDonors");
                });

            modelBuilder.Entity("Unite.Data.Entities.Identity.User", b =>
                {
                    b.Navigation("UserSessions");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.AnalysedSample", b =>
                {
                    b.Navigation("MatchedSamples");

                    b.Navigation("MutationOccurrences");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.Analysis", b =>
                {
                    b.Navigation("AnalysedSamples");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.Mutation", b =>
                {
                    b.Navigation("MutationOccurrences");
                });

            modelBuilder.Entity("Unite.Data.Entities.Mutations.Sample", b =>
                {
                    b.Navigation("SampleAnalises");
                });
#pragma warning restore 612, 618
        }
    }
}
